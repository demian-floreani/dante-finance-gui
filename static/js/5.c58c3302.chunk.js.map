{"version":3,"sources":["hooks/useHandleTransactionReceipt.ts","state/transactions/hooks.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/ModalActions/ModalActions.tsx","hooks/useAllowance.ts","components/UnlockWallet/UnlockWallet.tsx","hooks/useTombStats.ts","hooks/useApprove.ts","components/Spacer/Spacer.tsx","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx","../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","assets/img/purgatory.png","../node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js","../node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js","../node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js","../node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js","../node_modules/@material-ui/lab/esm/internal/svg-icons/Close.js","../node_modules/@material-ui/lab/esm/Alert/Alert.js","components/PageHeader/PageHeader.tsx","hooks/useEarnings.ts","hooks/useHarvest.ts","views/Bank/components/Harvest.tsx","hooks/useStake.ts","hooks/useStakedBalance.ts","hooks/useWithdraw.ts","views/Bank/components/DepositModal.tsx","views/Bank/components/WithdrawModal.tsx","views/Bank/components/Stake.tsx","hooks/useBank.ts","hooks/useStatsForPool.ts","hooks/useRedeem.ts","views/Bank/Bank.tsx","views/Cemetery/CemeteryCard.js","hooks/useBanks.ts","hooks/useFetchGenesisStartTime.ts","views/Cemetery/Cemetery.js"],"names":["useHandleTransactionReceipt","addTransaction","useTransactionAdder","addPopup","useAddPopup","useCallback","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","console","error","stack","useWallet","chainId","account","dispatch","useDispatch","response","approval","hash","Error","from","useAllTransactions","state","useSelector","transactions","useHasPendingApproval","tokenAddress","spender","allTransactions","useMemo","Object","keys","some","receipt","Date","getTime","addedTime","isTransactionRecent","StyledInputWrapper","styled","div","props","theme","color","grey","borderRadius","spacing","StyledInput","input","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","TokenInput","max","symbol","onSelectMax","toLocaleString","Button","size","variant","onClick","StyledModalActions","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useAllowance","token","pendingApproval","useState","allowance","setAllowance","fetchAllowance","a","useEffect","log","UnlockWallet","Box","style","position","top","left","transform","AccountButton","useTombStats","stat","setStat","tombFinance","useTombFinance","fetchCashPrice","getDanteStat","refreshInterval","setInterval","config","clearInterval","ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","useApprove","address","currentAllowance","approvalState","lt","PENDING","NOT_APPROVED","APPROVED","UNKNOWN","approve","Spacer","s","useContext","ThemeContext","useShareStats","fetchSharePrice","getShareStat","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","isUnlocked","fetchBalance","getDepositTokenPriceInDollars","balance","refreshStakedTokenPriceInDollars","StyledIcon","Icon","AddIcon","themeColor","height","viewBox","width","d","fill","RemoveIcon","StyledButton","button","disabled","primary","main","undefined","StyledLink","Link","IconButton","to","Card","ref","classes","className","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","name","CardContent","_props$component","component","Component","padding","paddingBottom","module","exports","createSvgIcon","defaultIconMapping","success","SuccessOutlinedIcon","fontSize","warning","ReportProblemOutlinedIcon","ErrorOutlineIcon","info","InfoOutlinedIcon","_ref","CloseIcon","Alert","action","_props$closeText","closeText","icon","_props$iconMapping","iconMapping","onClose","_props$role","role","_props$severity","severity","_props$variant","square","concat","capitalize","title","getColor","palette","type","darken","lighten","getBackgroundColor","typography","body2","shape","backgroundColor","display","standardSuccess","standardInfo","standardWarning","standardError","outlinedSuccess","border","outlinedInfo","outlinedWarning","outlinedError","filledSuccess","fontWeight","fontWeightMedium","filledInfo","filledWarning","filledError","marginRight","opacity","alignItems","marginLeft","paddingLeft","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","PageHeader","subtitle","useEarnings","poolName","earnTokenName","poolId","setBalance","earnedFromBank","myAccount","refreshBalance","useHarvest","bank","handleTransactionReceipt","onReward","harvest","contract","StyledCardHeader","StyledCardActions","StyledCardContentInner","Harvest","earnings","tombStats","tShareStats","tokenName","tokenStats","tokenPriceInDollars","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","TokenSymbol","earnToken","marginTop","eq","useStake","onStake","amount","amountBn","parseUnits","depositToken","decimal","stake","depositTokenName","useStakedBalance","stakedBalanceOnBank","useWithdraw","onWithdraw","unstake","DepositModal","decimals","onConfirm","onDismiss","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","text","WithdrawModal","StyledActionSpacer","Stake","approveStatus","tokenBalance","useTokenBalance","stakedBalance","useModal","isNaN","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","closedForStaking","useBank","BanksContext","banks","find","identifier","useStatsForPool","poolAPRs","setPoolAPRs","fetchAPRsForPool","getPoolAPRs","useRedeem","onRedeem","exit","useStyles","makeStyles","gridItem","breakpoints","up","danteBankCard","LPTokenHelpText","pairName","uniswapUrl","tombAddr","DANTE","tshareAddr","TSHARE","href","target","BankNotFound","Center","StyledBank","StyledCardsWrapper","StyledCardWrapper","Bank","window","scrollTo","bankId","useParams","statsOnPool","margin","Grid","container","justify","marginBottom","item","xs","md","lg","textAlign","Typography","yearlyAPR","dailyAPR","TVL","mt","CemeteryCard","right","justifyContent","toUpperCase","fee","useBanks","useFetchGenesisStartTime","timestamp","setTimestamp","fetchTimestampAsync","DanteRewardPool","contracts","poolStartTime","r","BackgroundImage","createGlobalStyle","CemeteryImage","Cemetery","path","useRouteMatch","activeBanks","filter","finished","date","toUTCString","Page","exact","Container","maxWidth","hidden","sectionInUI","Fragment","key"],"mappings":"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","file":"static/js/5.c58c3302.chunk.js","sourcesContent":["import { useCallback } from 'react';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { useTransactionAdder } from '../state/transactions/hooks';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, { summary }))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({ error: { message, stack: err.message || err.stack } });\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import { TransactionResponse } from '@ethersproject/providers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { addTransaction, clearAllTransactions } from './actions';\r\nimport { TransactionDetails } from './reducer';\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\r\n) => void {\r\n  const { chainId, account } = useWallet();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\r\n    ) => {\r\n      if (!account) return;\r\n      if (!chainId) return;\r\n\r\n      const { hash } = response;\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.');\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }));\r\n    },\r\n    [dispatch, chainId, account],\r\n  );\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useWallet();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  return chainId ? state[chainId] ?? {} : {};\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions();\r\n  if (!transactionHash || !transactions[transactionHash]) {\r\n    return false;\r\n  }\r\n  return !transactions[transactionHash].receipt;\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000;\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions();\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash];\r\n        if (!tx) return false;\r\n        if (tx.receipt) {\r\n          return false;\r\n        } else {\r\n          const approval = tx.approval;\r\n          if (!approval) return false;\r\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\r\n        }\r\n      }),\r\n    [allTransactions, spender, tokenAddress],\r\n  );\r\n}\r\n\r\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\r\n  const { chainId } = useWallet();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return {\r\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({ chainId })), [dispatch, chainId]),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode;\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n  startAdornment?: React.ReactNode;\r\n  value: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  );\r\n};\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[200]};\r\n  border-radius: ${(props) => props.theme.borderRadius}px;\r\n  display: flex;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.color.grey[600]};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`;\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length;\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <StyledSpacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  );\r\n};\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[100]}00;\r\n  display: flex;\r\n  height: 96px;\r\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\r\n    ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ModalActions;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\r\n  const [allowance, setAllowance] = useState<BigNumber>(null);\r\n  const { account } = useWallet();\r\n\r\n  const fetchAllowance = useCallback(async () => {\r\n    const allowance = await token.allowance(account, spender);\r\n    setAllowance(allowance);\r\n  }, [account, spender, token]);\r\n\r\n  useEffect(() => {\r\n    if (account && spender && token) {\r\n      fetchAllowance().catch((err) => console.log(`Failed to fetch allowance: ${err.stack}`));\r\n    }\r\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\r\n\r\n  return allowance;\r\n};\r\n\r\nexport default useAllowance;\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport AccountButton from '../Nav/AccountButton';\r\n\r\nconst UnlockWallet = () => {\r\n  return (\r\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n      <AccountButton />\r\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnlockWallet;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    setStat(await tombFinance.getDanteStat());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchCashPrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\r\n  const pendingApproval = useHasPendingApproval(token.address, spender);\r\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(spender, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: spender,\r\n      },\r\n    });\r\n  }, [approvalState, token, spender, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApprove;\r\n","import React, { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext);\r\n\r\n  let s: number;\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6];\r\n      break;\r\n    case 'sm':\r\n      s = spacing[2];\r\n      break;\r\n    case 'md':\r\n    default:\r\n      s = spacing[4];\r\n  }\r\n\r\n  return <StyledSpacer size={s} />;\r\n};\r\n\r\ninterface StyledSpacerProps {\r\n  size: number;\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`;\r\n\r\nexport default Spacer;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useShareStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchSharePrice = useCallback(async () => {\r\n    setStat(await tombFinance.getShareStat());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchSharePrice().catch((err) => console.error(`Failed to fetch TSHARE price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchSharePrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchSharePrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useShareStats;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\r\n  background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\r\n  border: 0;\r\n  border-radius: 28px;\r\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n  &:hover {\r\n    // background-color: ${(props) => props.theme.color.grey[800]};\r\n    background-color: #2c2560;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","module.exports = __webpack_public_path__ + \"static/media/purgatory.0d2860b4.png\";","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\r\n * @ignore - internal component.\r\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\r\n * @ignore - internal component.\r\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\r\n * @ignore - internal component.\r\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\r\n * @ignore - internal component.\r\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\r\n * @ignore - internal component.\r\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles, lighten, darken } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  var getColor = theme.palette.type === 'light' ? darken : lighten;\n  var getBackgroundColor = theme.palette.type === 'light' ? lighten : darken;\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, {\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: 'transparent',\n      display: 'flex',\n      padding: '6px 16px'\n    }),\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"success\"`. */\n    standardSuccess: {\n      color: getColor(theme.palette.success.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.success.main, 0.9),\n      '& $icon': {\n        color: theme.palette.success.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"info\"`. */\n    standardInfo: {\n      color: getColor(theme.palette.info.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.info.main, 0.9),\n      '& $icon': {\n        color: theme.palette.info.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"warning\"`. */\n    standardWarning: {\n      color: getColor(theme.palette.warning.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.warning.main, 0.9),\n      '& $icon': {\n        color: theme.palette.warning.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"error\"`. */\n    standardError: {\n      color: getColor(theme.palette.error.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.error.main, 0.9),\n      '& $icon': {\n        color: theme.palette.error.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`. */\n    outlinedSuccess: {\n      color: getColor(theme.palette.success.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.success.main),\n      '& $icon': {\n        color: theme.palette.success.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`. */\n    outlinedInfo: {\n      color: getColor(theme.palette.info.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.info.main),\n      '& $icon': {\n        color: theme.palette.info.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`. */\n    outlinedWarning: {\n      color: getColor(theme.palette.warning.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.warning.main),\n      '& $icon': {\n        color: theme.palette.warning.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`. */\n    outlinedError: {\n      color: getColor(theme.palette.error.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.error.main),\n      '& $icon': {\n        color: theme.palette.error.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"success\"`. */\n    filledSuccess: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.success.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"info\"`. */\n    filledInfo: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.info.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"warning\"`. */\n    filledWarning: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.warning.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"error\"`. */\n    filledError: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.error.main\n    },\n\n    /* Styles applied to the icon wrapper element. */\n    icon: {\n      marginRight: 12,\n      padding: '7px 0',\n      display: 'flex',\n      fontSize: 22,\n      opacity: 0.9\n    },\n\n    /* Styles applied to the message wrapper element. */\n    message: {\n      padding: '8px 0'\n    },\n\n    /* Styles applied to the action wrapper element if `action` is provided. */\n    action: {\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: 'auto',\n      paddingLeft: 16,\n      marginRight: -8\n    }\n  };\n};\nvar defaultIconMapping = {\n  success: /*#__PURE__*/React.createElement(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/React.createElement(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/React.createElement(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/React.createElement(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar Alert = /*#__PURE__*/React.forwardRef(function Alert(props, ref) {\n  var action = props.action,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      color = props.color,\n      icon = props.icon,\n      _props$iconMapping = props.iconMapping,\n      iconMapping = _props$iconMapping === void 0 ? defaultIconMapping : _props$iconMapping,\n      onClose = props.onClose,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'alert' : _props$role,\n      _props$severity = props.severity,\n      severity = _props$severity === void 0 ? 'success' : _props$severity,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"action\", \"children\", \"classes\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    role: role,\n    square: true,\n    elevation: 0,\n    className: clsx(classes.root, classes[\"\".concat(variant).concat(capitalize(color || severity))], className),\n    ref: ref\n  }, other), icon !== false ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.icon\n  }, icon || iconMapping[severity] || defaultIconMapping[severity]) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.message\n  }, children), action != null ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, action) : null, action == null && onClose ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    size: \"small\",\n    \"aria-label\": closeText,\n    title: closeText,\n    color: \"inherit\",\n    onClick: onClose\n  }, _ref)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The action to display. It renders after the message, at the end of the alert.\r\n   */\n  action: PropTypes.node,\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Override the default label for the *close popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\r\n   */\n  closeText: PropTypes.string,\n\n  /**\r\n   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.\r\n   */\n  color: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\r\n   * Override the icon displayed before the children.\r\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\r\n   */\n  icon: PropTypes.node,\n\n  /**\r\n   * The component maps the `severity` prop to a range of different icons,\r\n   * for instance success to `<SuccessOutlined>`.\r\n   * If you wish to change this mapping, you can provide your own.\r\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\r\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * The ARIA role attribute of the element.\r\n   */\n  role: PropTypes.string,\n\n  /**\r\n   * The severity of the alert. This defines the color and icon used.\r\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\r\n   * The variant to use.\r\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAlert'\n})(Alert);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PageHeaderProps {\r\n  icon: React.ReactNode;\r\n  subtitle?: string;\r\n  title?: string;\r\n}\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\r\n  return (\r\n    <StyledPageHeader>\r\n      {/* <StyledIcon>{icon}</StyledIcon> */}\r\n      <StyledTitle>{title}</StyledTitle>\r\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\r\n    </StyledPageHeader>\r\n  );\r\n};\r\n\r\nconst StyledPageHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\r\n  padding-top: ${(props) => props.theme.spacing[6]}px;\r\n  max-width: 512px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n  color: ${(props) => props.theme.color.grey[100]};\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledSubtitle = styled.h3`\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  margin: 0;\r\n  padding: 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport default PageHeader;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport { ContractName } from '../tomb-finance';\r\nimport config from '../config';\r\n\r\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\r\n    setBalance(balance);\r\n  }, [poolName, earnTokenName, poolId, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarnings;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { Bank } from '../tomb-finance';\r\n\r\nconst useHarvest = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(\r\n      tombFinance.harvest(bank.contract, bank.poolId),\r\n      `Claim ${bank.earnTokenName} from ${bank.contract}`,\r\n    );\r\n  }, [bank, tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvest;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button, Card, CardContent } from '@material-ui/core';\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useEarnings from '../../../hooks/useEarnings';\r\nimport useHarvest from '../../../hooks/useHarvest';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../tomb-finance';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport useShareStats from '../../../hooks/usetShareStats';\r\n\r\ninterface HarvestProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({ bank }) => {\r\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\r\n  const { onReward } = useHarvest(bank);\r\n  const tombStats = useTombStats();\r\n  const tShareStats = useShareStats();\r\n\r\n  const tokenName = bank.earnTokenName === 'GRAIL' ? 'GRAIL' : 'DANTE';\r\n  const tokenStats = bank.earnTokenName === 'GRAIL' ? tShareStats : tombStats;\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\r\n    [tokenStats],\r\n  );\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n  return (\r\n    <Card style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n            <TokenSymbol symbol={bank.earnToken.symbol} size={80} />\r\n            <span style={{ fontSize: '26px', marginTop: '10px' }}>{getDisplayBalance(earnings)}</span>\r\n            <span style={{ fontSize: '16px' }}>{`${tokenName} Earned`}</span>\r\n            <span style={{ fontSize: '14px' }}>{`≈ $${earnedInDollars}`}</span>\r\n            \r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            <Button onClick={onReward} disabled={earnings.eq(0)} color=\"primary\" variant=\"contained\">\r\n              Claim\r\n            </Button>\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[3]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\nconst useStake = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\r\n      handleTransactionReceipt(\r\n        tombFinance.stake(bank.contract, bank.poolId, amountBn),\r\n        `Stake ${amount} ${bank.depositTokenName} to ${bank.contract}`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStake;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport { ContractName } from '../tomb-finance';\r\nimport config from '../config';\r\n\r\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\r\n    setBalance(balance);\r\n  }, [poolName, poolId, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalance;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\nconst useWithdraw = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\r\n      handleTransactionReceipt(\r\n        tombFinance.unstake(bank.contract, bank.poolId, amountBn),\r\n        `Withdraw ${amount} ${bank.depositTokenName} from ${bank.contract}`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdraw;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  decimals: number;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, decimals, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, false);\r\n  }, [max, decimals]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        {/* <Button color=\"secondary\" variant=\"outlined\" onClick={onDismiss}>Cancel</Button> */}\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n  decimals?: number;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimals = 18 }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, false);\r\n  }, [max, decimals]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button color=\"secondary\" onClick={onDismiss}>Cancel</Button> */}\r\n\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import React, { useMemo, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// import Button from '../../../components/Button';\r\nimport { Button, Card, CardContent } from '@material-ui/core';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useStake from '../../../hooks/useStake';\r\n//import useZap from '../../../hooks/useZap';\r\nimport useStakedBalance from '../../../hooks/useStakedBalance';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdraw from '../../../hooks/useWithdraw';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\n//import ZapModal from './ZapModal';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../tomb-finance';\r\n\r\ninterface StakeProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\r\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\r\n\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  const tokenBalance = useTokenBalance(bank.depositToken);\r\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\r\n    [stakedTokenPriceInDollars],\r\n  );\r\n  const earnedInDollars = (\r\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\r\n  ).toFixed(2);\r\n  const { onStake } = useStake(bank);\r\n  //const { onZap } = useZap(bank);\r\n  const { onWithdraw } = useWithdraw(bank);\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onStake(amount);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  /*\r\n  const [onPresentZap, onDissmissZap] = useModal(\r\n    <ZapModal\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(zappingToken, tokenName, amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onZap(zappingToken, tokenName, amount);\r\n        onDissmissZap();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );*/\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onWithdraw(amount);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Card style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n            <TokenSymbol symbol={bank.depositToken.symbol} size={80}/>\r\n            <span style={{ fontSize: '26px', marginTop: '10px' }}>{getDisplayBalance(stakedBalance, bank.depositToken.decimal)}</span>\r\n            <span style={{ fontSize: '16px' }}>{`${bank.depositTokenName} Staked`}</span>\r\n            <span style={{ fontSize: '14px' }}>{`≈ $${earnedInDollars}`}</span>\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            {approveStatus !== ApprovalState.APPROVED ? (\r\n              <Button\r\n                disabled={\r\n                  bank.closedForStaking ||\r\n                  approveStatus === ApprovalState.PENDING ||\r\n                  approveStatus === ApprovalState.UNKNOWN\r\n                }\r\n                onClick={approve}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                style={{ marginTop: '20px' }}\r\n              >\r\n                {`Approve ${bank.depositTokenName}`}\r\n              </Button>\r\n            ) : (\r\n              <>\r\n                <IconButton onClick={onPresentWithdraw}>\r\n                  <RemoveIcon />\r\n                </IconButton>\r\n                <StyledActionSpacer />\r\n                {/*<IconButton\r\n                  disabled={bank.closedForStaking}\r\n                  onClick={() => (bank.closedForStaking ? null : onPresentZap())}\r\n                >\r\n                  <FlashOnIcon style={{ color: themeColor.grey[400] }} />\r\n                </IconButton>\r\n                <StyledActionSpacer /> */ }\r\n                <IconButton\r\n                  disabled={bank.closedForStaking}\r\n                  onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\r\n                >\r\n                  <AddIcon />\r\n                </IconButton>\r\n              </>\r\n            )}\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 0px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useContext } from 'react';\r\nimport { Context as BanksContext } from '../contexts/Banks';\r\nimport { Bank, ContractName } from '../tomb-finance';\r\n\r\nconst useBank = (name: ContractName): Bank => {\r\n  const { banks } = useContext(BanksContext);\r\n  return banks.find((bank) => bank.identifier === name);\r\n};\r\n\r\nexport default useBank;\r\n","import { useCallback, useState, useEffect } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport { PoolStats } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useStatsForPool = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n\r\n  const [poolAPRs, setPoolAPRs] = useState<PoolStats>();\r\n\r\n  const fetchAPRsForPool = useCallback(async () => {\r\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\r\n  }, [tombFinance, bank]);\r\n\r\n  useEffect(() => {\r\n    fetchAPRsForPool().catch((err) => console.error(`Failed to fetch TBOND price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\r\n\r\n  return poolAPRs;\r\n};\r\n\r\nexport default useStatsForPool;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeem = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.exit(bank.contract, bank.poolId), `Redeem ${bank.contract}`);\r\n  }, [bank, tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeem;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { useWallet } from 'use-wallet';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Box, Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Spacer from '../../components/Spacer';\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport useBank from '../../hooks/useBank';\r\nimport useStatsForPool from '../../hooks/useStatsForPool';\r\nimport useRedeem from '../../hooks/useRedeem';\r\nimport { Bank as BankEntity } from '../../tomb-finance';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    }\r\n  },\r\n  danteBankCard: {\r\n    backgroundColor: 'rgba(104, 76, 172, 0.9)'\r\n  }\r\n}));\r\n\r\nconst Bank: React.FC = () => {\r\n  useEffect(() => window.scrollTo(0, 0));\r\n  const classes = useStyles();\r\n  const { bankId } = useParams<{ bankId: string }>();\r\n  const bank = useBank(bankId);\r\n\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeem(bank);\r\n  const statsOnPool = useStatsForPool(bank);\r\n\r\n  return account && bank ? (\r\n    <>\r\n      <Box>\r\n        <h2 style={{display:'table', padding:'10px', backgroundColor: 'rgba(104, 76, 172, 0.9)', color:'#FFF', margin: '0px auto 40px auto' }}>\r\n          {bank.name}\r\n        </h2>\r\n        \r\n        <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '50px' }}>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={`classes.gridItem`} style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem} style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>Daily APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.dailyAPR}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem} style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>TVL</Typography>\r\n                <Typography>${statsOnPool?.TVL}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box mt={5}>\r\n        <StyledBank>\r\n          <StyledCardsWrapper>\r\n            <StyledCardWrapper>\r\n              <Harvest bank={bank} />\r\n            </StyledCardWrapper>\r\n            <Spacer />\r\n            <StyledCardWrapper>\r\n              <Stake bank={bank} />\r\n            </StyledCardWrapper>\r\n          </StyledCardsWrapper>\r\n          <Spacer size=\"lg\" />\r\n          {bank.depositTokenName.includes('LP') && <LPTokenHelpText bank={bank} />}\r\n          <Spacer size=\"lg\" />\r\n          <div>\r\n            <Button onClick={onRedeem} color=\"primary\" variant=\"contained\">\r\n              Claim & Withdraw\r\n            </Button>\r\n          </div>\r\n          <Spacer size=\"lg\" />\r\n        </StyledBank>\r\n      </Box>\r\n    </>\r\n  ) : !bank ? (\r\n    <BankNotFound />\r\n  ) : (\r\n    <UnlockWallet />\r\n  );\r\n};\r\n\r\nconst LPTokenHelpText: React.FC<{ bank: BankEntity }> = ({ bank }) => {\r\n  const tombFinance = useTombFinance();\r\n  const tombAddr = tombFinance.DANTE.address;\r\n  const tshareAddr = tombFinance.TSHARE.address;\r\n\r\n  let pairName: string;\r\n  let uniswapUrl: string;\r\n  if (bank.depositTokenName.includes('DANTE')) {\r\n    pairName = 'TOMB-FTM pair';\r\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tombAddr;\r\n  } else {\r\n    pairName = 'TSHARE-FTM pair';\r\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tshareAddr;\r\n  }\r\n  return (\r\n    <Card style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n      <CardContent>\r\n        <StyledLink href={uniswapUrl} target=\"_blank\">\r\n          {`👻 Provide liquidity for ${pairName} now on SpookySwap 👻`}\r\n        </StyledLink>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst BankNotFound = () => {\r\n  return (\r\n    <Center>\r\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"You've hit a bank just robbed by unicorns.\" />\r\n    </Center>\r\n  );\r\n};\r\n\r\nconst StyledBank = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  text-decoration: none;\r\n  color: #FFF;\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst Center = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Bank;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Box, Button, Card, CardActions, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\nimport TokenSymbol from '../../components/TokenSymbol';\r\n\r\nconst CemeteryCard = ({ bank }) => {\r\n  return (\r\n    <Grid item xs={12} md={4} lg={4}>\r\n      <Link to={`/cemetery/${bank.identifier}`}>\r\n      {/*<a href={`/dante-finance-gui/cemetery/${bank.contract}`}>*/}\r\n        <Card className='dantePurgatoryCard' variant=\"outlined\">\r\n          <CardContent>\r\n            <Box style={{ position: 'relative' }}>\r\n              <Box\r\n                style={{\r\n                  position: 'absolute',\r\n                  right: '0px',\r\n                  top: '-5px',\r\n                  height: '48px',\r\n                  width: '48px',\r\n                  \r\n                  alignItems: 'center',\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                }}\r\n              >\r\n                <TokenSymbol size={64} symbol={bank.depositTokenName} />\r\n              </Box>\r\n              <h4 style={{marginBottom: \"10px\"}}>{bank.depositTokenName}</h4>\r\n              <h5 style={{fontSize: \"1em\"}}>Deposit: {bank.depositTokenName.toUpperCase()}</h5> \r\n              <h5 style={{fontSize: \"1em\"}}>Earn: {bank.earnTokenName}</h5>\r\n              <h5 style={{fontSize: \"1em\"}}>Fee: {bank.fee}%</h5>\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n        </Link>\r\n      {/*</a>*/}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CemeteryCard;\r\n","import { useContext } from 'react';\r\nimport { Context as BanksContext } from '../contexts/Banks';\r\n\r\nconst useBanks = () => {\r\n  const { banks } = useContext(BanksContext);\r\n  return [banks];\r\n};\r\n\r\nexport default useBanks;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\n\r\nconst useFetchGenesisStartTime = () => {\r\n  const [timestamp, setTimestamp] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchTimestampAsync = useCallback(async () => {\r\n    const { DanteRewardPool } = tombFinance.contracts;\r\n    let r = await DanteRewardPool.poolStartTime();\r\n    setTimestamp(r);\r\n  }, [tombFinance.contracts]);\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      fetchTimestampAsync();\r\n    }\r\n  }, [tombFinance]);\r\n\r\n  return timestamp;\r\n};\r\n\r\nexport default useFetchGenesisStartTime;\r\n","import React from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport Bank from '../Bank';\r\nimport { Box, Container, Typography, Grid, rgbToHex } from '@material-ui/core';\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\nimport CemeteryCard from './CemeteryCard';\r\nimport CemeteryImage from '../../assets/img/purgatory.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport useBanks from '../../hooks/useBanks';\r\nimport useFetchGenesisStartTime from '../../hooks/useFetchGenesisStartTime';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background: url(${CemeteryImage}) no-repeat !important;\r\n    background-size: cover !important;\r\n  }\r\n`;\r\n\r\nconst Cemetery = () => {\r\n  const [banks] = useBanks();\r\n  const { path } = useRouteMatch();\r\n  const { account } = useWallet();\r\n  const activeBanks = banks.filter((bank) => !bank.finished);\r\n  const timestamp = useFetchGenesisStartTime();\r\n  var date = new Date(timestamp * 1000).toUTCString();\r\n\r\n  return (\r\n    <Switch>\r\n      <Page>\r\n        <Route exact path={path}>\r\n          <BackgroundImage />\r\n          {!!account ? (\r\n            <Container maxWidth=\"lg\">\r\n              \r\n              <h2 style={{display:'table', padding:'10px', backgroundColor: 'rgba(104, 76, 172, 0.9)', color:'#FFF', margin: '0px auto 0px auto' }}>Purgatory</h2>\r\n              \r\n              <Box mt={5}>\r\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 2).length === 0}>\r\n                  <h4 style={{display:'table', padding:'10px', backgroundColor: 'rgba(104, 76, 172, 0.9)', color:'#FFF', margin: '0px auto 0px auto' }}>Earn Grail by staking LP</h4>\r\n                  \r\n                  <Grid container spacing={3} style={{marginTop: '10px', marginBottom: '10px'}}>\r\n                    {activeBanks\r\n                      .filter((bank) => bank.sectionInUI === 2)\r\n                      .map((bank) => (\r\n                        <React.Fragment key={bank.name}>\r\n                          <CemeteryCard bank={bank} />\r\n                        </React.Fragment>\r\n                      ))}\r\n                  </Grid>\r\n                </div>\r\n\r\n                <div style={{marginTop: '40px'}} hidden={activeBanks.filter((bank) => bank.sectionInUI === 0).length === 0}>\r\n                  <h4 style={{display:'table', padding:'10px', backgroundColor: 'rgba(104, 76, 172, 0.9)', color:'#FFF', margin: '0px auto 0px auto' }}>Genesis Pools</h4>\r\n                  \r\n                  <Grid container style={{marginTop: '10px'}}>\r\n                    <Grid item md='3'></Grid>\r\n                    <Grid item md='6'>\r\n                      <Alert variant=\"filled\" severity=\"warning\">\r\n                        Pools starting at {date} and will run for 2 days with a 0.8% deposit fee. Please refer to our documentation to understand our protocol's fee model.\r\n                      </Alert>\r\n                    </Grid>\r\n                    <Grid item md='3'></Grid>\r\n                  </Grid>\r\n                  \r\n                  <Grid container spacing={3} style={{marginTop: '15px'}}>\r\n                    {activeBanks\r\n                      .filter((bank) => bank.sectionInUI === 0)\r\n                      .map((bank) => (\r\n                        <React.Fragment key={bank.name}>\r\n                          <CemeteryCard bank={bank} />\r\n                        </React.Fragment>\r\n                      ))}\r\n                  </Grid>\r\n                </div>\r\n              </Box>\r\n            </Container>\r\n          ) : (\r\n            <UnlockWallet />\r\n          )}\r\n        </Route>\r\n        <Route path={`${path}/:bankId`}>\r\n          <BackgroundImage />\r\n          <Bank />\r\n        </Route>\r\n      </Page>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Cemetery;\r\n"],"sourceRoot":""}