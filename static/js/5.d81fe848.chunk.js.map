{"version":3,"sources":["hooks/useHandleTransactionReceipt.ts","state/transactions/hooks.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/ModalActions/ModalActions.tsx","hooks/useAllowance.ts","components/UnlockWallet/UnlockWallet.tsx","hooks/useTombStats.ts","hooks/useApprove.ts","components/Spacer/Spacer.tsx","components/Value/Value.tsx","hooks/useLpStats.ts","hooks/useZap.ts","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","hooks/useApproveZapper.ts","views/Bank/components/ZapModal.tsx","components/PageHeader/PageHeader.tsx","components/IconButton/IconButton.tsx","../node_modules/@material-ui/icons/FlashOn.js","assets/img/purgatory.png","hooks/useEarnings.ts","hooks/useHarvest.ts","views/Bank/components/Harvest.tsx","hooks/useStake.ts","hooks/useStakedBalance.ts","hooks/useWithdraw.ts","views/Bank/components/DepositModal.tsx","views/Bank/components/WithdrawModal.tsx","views/Bank/components/Stake.tsx","hooks/useBank.ts","hooks/useStatsForPool.ts","hooks/useRedeem.ts","views/Bank/Bank.tsx","../node_modules/@material-ui/core/esm/CardActions/CardActions.js","views/Cemetery/CemeteryCard.js","hooks/useBanks.ts","views/Cemetery/Cemetery.js"],"names":["useHandleTransactionReceipt","addTransaction","useTransactionAdder","addPopup","useAddPopup","useCallback","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","console","error","stack","useWallet","chainId","account","dispatch","useDispatch","response","approval","hash","Error","from","useAllTransactions","state","useSelector","transactions","useHasPendingApproval","tokenAddress","spender","allTransactions","useMemo","Object","keys","some","receipt","Date","getTime","addedTime","isTransactionRecent","StyledInputWrapper","styled","div","props","theme","color","grey","borderRadius","spacing","StyledInput","input","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","TokenInput","max","symbol","onSelectMax","toLocaleString","Button","size","variant","onClick","StyledModalActions","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useAllowance","token","pendingApproval","useState","allowance","setAllowance","fetchAllowance","a","useEffect","log","UnlockWallet","Box","style","position","top","left","transform","AccountButton","useTombStats","stat","setStat","tombFinance","useTombFinance","fetchCashPrice","getDanteStat","refreshInterval","setInterval","config","clearInterval","ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","useApprove","address","currentAllowance","approvalState","lt","PENDING","NOT_APPROVED","APPROVED","UNKNOWN","approve","Spacer","s","useContext","ThemeContext","StyledValue","Value","useLpStats","lpTicker","getLPStat","useZap","bank","handleTransactionReceipt","onZap","zappingToken","tokenName","amount","zapIn","depositTokenName","useShareStats","fetchSharePrice","getShareStat","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","isUnlocked","fetchBalance","getDepositTokenPriceInDollars","balance","refreshStakedTokenPriceInDollars","StyledIcon","Icon","AddIcon","themeColor","height","viewBox","width","d","fill","RemoveIcon","useApproveZapper","FTM_TICKER","FTM","TOMB_TICKER","DANTE","TSHARE_TICKER","TSHARE","ZAPPER_ROUTER_ADDR","StyledActionSpacer","StyledDescriptionText","StyledMenuItem","withStyles","root","backgroundColor","selected","MenuItem","ZapModal","onConfirm","onDismiss","decimals","ftmBalance","Number","toFixed","toString","tombBalance","useTokenBalance","tshareBalance","val","setVal","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","tombFtmLpStats","tShareFtmLpStats","tombLPStats","tshareLPStats","ftmAmountPerLP","startsWith","ftmAmount","handleChange","e","currentTarget","n","isNaN","parseFloat","isFinite","estimateZapIn","String","estimateZap","handleSelectMax","Modal","ModalTitle","text","Typography","align","target","rel","href","InputLabel","id","Select","event","getDisplayBalance","labelId","Label","Alert","severity","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","PageHeader","icon","subtitle","title","StyledButton","button","disabled","primary","main","undefined","StyledLink","Link","IconButton","to","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","_default","createElement","module","useEarnings","poolName","earnTokenName","poolId","setBalance","earnedFromBank","myAccount","refreshBalance","useHarvest","onReward","harvest","contract","StyledCardHeader","StyledCardActions","StyledCardContentInner","Harvest","earnings","tombStats","tShareStats","tokenStats","tokenPriceInDollars","priceInDollars","earnedInDollars","Card","CardContent","TokenSymbol","earnToken","eq","useStake","onStake","amountBn","parseUnits","depositToken","decimal","stake","useStakedBalance","stakedBalanceOnBank","useWithdraw","onWithdraw","unstake","DepositModal","fullBalance","getFullDisplayBalance","WithdrawModal","Stake","approveStatus","tokenBalance","stakedBalance","useModal","onDismissDeposit","onPresentDeposit","onDissmissZap","onPresentZap","onDismissWithdraw","onPresentWithdraw","closedForStaking","marginTop","useBank","contractName","BanksContext","banks","find","useStatsForPool","poolAPRs","setPoolAPRs","fetchAPRsForPool","getPoolAPRs","useRedeem","onRedeem","exit","useStyles","makeStyles","gridItem","breakpoints","up","LPTokenHelpText","pairName","uniswapUrl","tombAddr","tshareAddr","BankNotFound","Center","StyledBank","StyledCardsWrapper","StyledCardWrapper","Bank","window","scrollTo","classes","bankId","useParams","statsOnPool","name","Grid","container","justify","marginBottom","item","xs","md","lg","className","textAlign","yearlyAPR","dailyAPR","TVL","mt","CardActions","ref","_props$disableSpacing","disableSpacing","other","_objectWithoutProperties","_extends","clsx","display","alignItems","padding","marginLeft","CemeteryCard","right","justifyContent","component","toUpperCase","useBanks","BackgroundImage","createGlobalStyle","CemeteryImage","Cemetery","path","useRouteMatch","activeBanks","filter","finished","Page","exact","Container","maxWidth","gutterBottom","hidden","sectionInUI","Fragment","key"],"mappings":"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","file":"static/js/5.d81fe848.chunk.js","sourcesContent":["import { useCallback } from 'react';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { useTransactionAdder } from '../state/transactions/hooks';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, { summary }))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({ error: { message, stack: err.message || err.stack } });\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import { TransactionResponse } from '@ethersproject/providers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { addTransaction, clearAllTransactions } from './actions';\r\nimport { TransactionDetails } from './reducer';\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\r\n) => void {\r\n  const { chainId, account } = useWallet();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\r\n    ) => {\r\n      if (!account) return;\r\n      if (!chainId) return;\r\n\r\n      const { hash } = response;\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.');\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }));\r\n    },\r\n    [dispatch, chainId, account],\r\n  );\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useWallet();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  return chainId ? state[chainId] ?? {} : {};\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions();\r\n  if (!transactionHash || !transactions[transactionHash]) {\r\n    return false;\r\n  }\r\n  return !transactions[transactionHash].receipt;\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000;\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions();\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash];\r\n        if (!tx) return false;\r\n        if (tx.receipt) {\r\n          return false;\r\n        } else {\r\n          const approval = tx.approval;\r\n          if (!approval) return false;\r\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\r\n        }\r\n      }),\r\n    [allTransactions, spender, tokenAddress],\r\n  );\r\n}\r\n\r\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\r\n  const { chainId } = useWallet();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return {\r\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({ chainId })), [dispatch, chainId]),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode;\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n  startAdornment?: React.ReactNode;\r\n  value: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  );\r\n};\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[200]};\r\n  border-radius: ${(props) => props.theme.borderRadius}px;\r\n  display: flex;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.color.grey[600]};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`;\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length;\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <StyledSpacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  );\r\n};\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[100]}00;\r\n  display: flex;\r\n  height: 96px;\r\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\r\n    ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ModalActions;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\r\n  const [allowance, setAllowance] = useState<BigNumber>(null);\r\n  const { account } = useWallet();\r\n\r\n  const fetchAllowance = useCallback(async () => {\r\n    const allowance = await token.allowance(account, spender);\r\n    setAllowance(allowance);\r\n  }, [account, spender, token]);\r\n\r\n  useEffect(() => {\r\n    if (account && spender && token) {\r\n      fetchAllowance().catch((err) => console.log(`Failed to fetch allowance: ${err.stack}`));\r\n    }\r\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\r\n\r\n  return allowance;\r\n};\r\n\r\nexport default useAllowance;\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport AccountButton from '../Nav/AccountButton';\r\n\r\nconst UnlockWallet = () => {\r\n  return (\r\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n      <AccountButton />\r\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnlockWallet;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    setStat(await tombFinance.getDanteStat());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchCashPrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\r\n  const pendingApproval = useHasPendingApproval(token.address, spender);\r\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(spender, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: spender,\r\n      },\r\n    });\r\n  }, [approvalState, token, spender, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApprove;\r\n","import React, { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext);\r\n\r\n  let s: number;\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6];\r\n      break;\r\n    case 'sm':\r\n      s = spacing[2];\r\n      break;\r\n    case 'md':\r\n    default:\r\n      s = spacing[4];\r\n  }\r\n\r\n  return <StyledSpacer size={s} />;\r\n};\r\n\r\ninterface StyledSpacerProps {\r\n  size: number;\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`;\r\n\r\nexport default Spacer;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { LPStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useLpStats = (lpTicker: string) => {\r\n  const [stat, setStat] = useState<LPStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    setStat(await tombFinance.getLPStat(lpTicker));\r\n  }, [tombFinance, lpTicker]);\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchCashPrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useLpStats;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useZap = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleZap = useCallback(\r\n    (zappingToken: string, tokenName: string, amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.zapIn(zappingToken, tokenName, amount),\r\n        `Zap ${amount} in ${bank.depositTokenName}.`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onZap: handleZap };\r\n};\r\n\r\nexport default useZap;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useShareStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchSharePrice = useCallback(async () => {\r\n    setStat(await tombFinance.getShareStat());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchSharePrice().catch((err) => console.error(`Failed to fetch TSHARE price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchSharePrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchSharePrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useShareStats;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\nimport { FTM_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\r\nimport useTombFinance from './useTombFinance';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\r\n  const tombFinance = useTombFinance();\r\n  let token: ERC20;\r\n  if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\r\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.DANTE;\r\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\r\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\r\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: ZAPPER_ROUTER_ADDR,\r\n      },\r\n    });\r\n  }, [approvalState, token, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApproveZapper;\r\n","import React, { useState, useMemo } from 'react';\r\n\r\nimport { Button, Select, MenuItem, InputLabel, Typography, withStyles } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\nimport styled from 'styled-components';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport Label from '../../../components/Label';\r\nimport useLpStats from '../../../hooks/useLpStats';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport { useWallet } from 'use-wallet';\r\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\r\nimport { TOMB_TICKER, TSHARE_TICKER, FTM_TICKER } from '../../../utils/constants';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\ninterface ZapProps extends ModalProps {\r\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\r\n  tokenName?: string;\r\n  decimals?: number;\r\n}\r\n\r\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\r\n  const tombFinance = useTombFinance();\r\n  const { balance } = useWallet();\r\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\r\n  const tombBalance = useTokenBalance(tombFinance.DANTE);\r\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\r\n  const [val, setVal] = useState('');\r\n  const [zappingToken, setZappingToken] = useState(FTM_TICKER);\r\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\r\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\r\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\r\n  const tombFtmLpStats = useLpStats('DANTE-TOMB-LP');\r\n  const tShareFtmLpStats = useLpStats('GRAIL-FTM-LP');\r\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\r\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\r\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\r\n  /**\r\n   * Checks if a value is a valid number or not\r\n   * @param n is the value to be evaluated for a number\r\n   * @returns\r\n   */\r\n  function isNumeric(n: any) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n  const handleChangeAsset = (event: any) => {\r\n    const value = event.target.value;\r\n    setZappingToken(value);\r\n    setZappingTokenBalance(ftmBalance);\r\n    if (event.target.value === TSHARE_TICKER) {\r\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\r\n    }\r\n    if (event.target.value === TOMB_TICKER) {\r\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\r\n    }\r\n  };\r\n\r\n  const handleChange = async (e: any) => {\r\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\r\n      setVal(e.currentTarget.value);\r\n      setEstimate({ token0: '0', token1: '0' });\r\n    }\r\n    if (!isNumeric(e.currentTarget.value)) return;\r\n    setVal(e.currentTarget.value);\r\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\r\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\r\n  };\r\n\r\n  const handleSelectMax = async () => {\r\n    setVal(zappingTokenBalance);\r\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\r\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\r\n  };\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Zap in ${tokenName}`} />\r\n      <Typography variant=\"h6\" align=\"center\">\r\n        Powered by{' '}\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlnl.finance\">\r\n          mlnl.finance\r\n        </a>\r\n      </Typography>\r\n\r\n      <StyledActionSpacer />\r\n      <InputLabel style={{ color: '#2c2560' }} id=\"label\">\r\n        Select asset to zap with\r\n      </InputLabel>\r\n      <Select\r\n        onChange={handleChangeAsset}\r\n        style={{ color: '#2c2560' }}\r\n        labelId=\"label\"\r\n        id=\"select\"\r\n        value={zappingToken}\r\n      >\r\n        <StyledMenuItem value={FTM_TICKER}>FTM</StyledMenuItem>\r\n        <StyledMenuItem value={TOMB_TICKER}>TOMB</StyledMenuItem>\r\n        <StyledMenuItem value={TSHARE_TICKER}>TSHARE</StyledMenuItem>\r\n      </Select>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={zappingTokenBalance}\r\n        symbol={zappingToken}\r\n      />\r\n      <Label text=\"Zap Estimations\" />\r\n      <StyledDescriptionText>\r\n        {' '}\r\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\r\n      </StyledDescriptionText>\r\n      <StyledDescriptionText>\r\n        {' '}\r\n        ({Number(estimate.token0)} {FTM_TICKER} / {Number(estimate.token1)}{' '}\r\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\r\n      </StyledDescriptionText>\r\n      <ModalActions>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() =>\r\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\r\n          }\r\n        >\r\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\r\n        </Button>\r\n      </ModalActions>\r\n\r\n      <StyledActionSpacer />\r\n      <Alert variant=\"filled\" severity=\"warning\">\r\n        Beta feature. Use at your own risk!\r\n      </Alert>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledDescriptionText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 22px;\r\n  justify-content: flex-start;\r\n`;\r\nconst StyledMenuItem = withStyles({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    color: '#2c2560',\r\n    '&:hover': {\r\n      backgroundColor: 'grey',\r\n      color: '#2c2560',\r\n    },\r\n    selected: {\r\n      backgroundColor: 'black',\r\n    },\r\n  },\r\n})(MenuItem);\r\n\r\nexport default ZapModal;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PageHeaderProps {\r\n  icon: React.ReactNode;\r\n  subtitle?: string;\r\n  title?: string;\r\n}\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\r\n  return (\r\n    <StyledPageHeader>\r\n      {/* <StyledIcon>{icon}</StyledIcon> */}\r\n      <StyledTitle>{title}</StyledTitle>\r\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\r\n    </StyledPageHeader>\r\n  );\r\n};\r\n\r\nconst StyledPageHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\r\n  padding-top: ${(props) => props.theme.spacing[6]}px;\r\n  max-width: 512px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n  color: ${(props) => props.theme.color.grey[100]};\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledSubtitle = styled.h3`\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  margin: 0;\r\n  padding: 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport default PageHeader;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\r\n  background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\r\n  border: 0;\r\n  border-radius: 28px;\r\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n  &:hover {\r\n    // background-color: ${(props) => props.theme.color.grey[800]};\r\n    background-color: #2c2560;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 2v11h3v9l7-12h-4l4-8z\"\n}), 'FlashOn');\n\nexports.default = _default;","module.exports = __webpack_public_path__ + \"static/media/purgatory.f27e2f89.png\";","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport { ContractName } from '../tomb-finance';\r\nimport config from '../config';\r\n\r\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\r\n    setBalance(balance);\r\n  }, [poolName, earnTokenName, poolId, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarnings;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { Bank } from '../tomb-finance';\r\n\r\nconst useHarvest = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(\r\n      tombFinance.harvest(bank.contract, bank.poolId),\r\n      `Claim ${bank.earnTokenName} from ${bank.contract}`,\r\n    );\r\n  }, [bank, tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvest;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button, Card, CardContent } from '@material-ui/core';\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useEarnings from '../../../hooks/useEarnings';\r\nimport useHarvest from '../../../hooks/useHarvest';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../tomb-finance';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport useShareStats from '../../../hooks/usetShareStats';\r\n\r\ninterface HarvestProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({ bank }) => {\r\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\r\n  const { onReward } = useHarvest(bank);\r\n  const tombStats = useTombStats();\r\n  const tShareStats = useShareStats();\r\n\r\n  const tokenName = bank.earnTokenName === 'GRAIL' ? 'GRAIL' : 'DANTE';\r\n  const tokenStats = bank.earnTokenName === 'GRAIL' ? tShareStats : tombStats;\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\r\n    [tokenStats],\r\n  );\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n            <TokenSymbol symbol={bank.earnToken.symbol} />\r\n            <Value value={getDisplayBalance(earnings)} />\r\n            <Label text={`≈ $${earnedInDollars}`} />\r\n            <Label text={`${tokenName} Earned`} />\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            <Button onClick={onReward} disabled={earnings.eq(0)} color=\"primary\" variant=\"contained\">\r\n              Claim\r\n            </Button>\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\nconst useStake = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\r\n      handleTransactionReceipt(\r\n        tombFinance.stake(bank.contract, bank.poolId, amountBn),\r\n        `Stake ${amount} ${bank.depositTokenName} to ${bank.contract}`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStake;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport { ContractName } from '../tomb-finance';\r\nimport config from '../config';\r\n\r\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\r\n    setBalance(balance);\r\n  }, [poolName, poolId, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalance;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\nconst useWithdraw = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\r\n      handleTransactionReceipt(\r\n        tombFinance.unstake(bank.contract, bank.poolId, amountBn),\r\n        `Withdraw ${amount} ${bank.depositTokenName} from ${bank.contract}`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdraw;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  decimals: number;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, decimals, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, false);\r\n  }, [max, decimals]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        {/* <Button color=\"secondary\" variant=\"outlined\" onClick={onDismiss}>Cancel</Button> */}\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n  decimals?: number;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimals = 18 }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, false);\r\n  }, [max, decimals]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button color=\"secondary\" onClick={onDismiss}>Cancel</Button> */}\r\n\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import React, { useMemo, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// import Button from '../../../components/Button';\r\nimport { Button, Card, CardContent } from '@material-ui/core';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useStake from '../../../hooks/useStake';\r\nimport useZap from '../../../hooks/useZap';\r\nimport useStakedBalance from '../../../hooks/useStakedBalance';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdraw from '../../../hooks/useWithdraw';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport ZapModal from './ZapModal';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../tomb-finance';\r\n\r\ninterface StakeProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\r\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\r\n\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  const tokenBalance = useTokenBalance(bank.depositToken);\r\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\r\n    [stakedTokenPriceInDollars],\r\n  );\r\n  const earnedInDollars = (\r\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\r\n  ).toFixed(2);\r\n  const { onStake } = useStake(bank);\r\n  const { onZap } = useZap(bank);\r\n  const { onWithdraw } = useWithdraw(bank);\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onStake(amount);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  const [onPresentZap, onDissmissZap] = useModal(\r\n    <ZapModal\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(zappingToken, tokenName, amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onZap(zappingToken, tokenName, amount);\r\n        onDissmissZap();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onWithdraw(amount);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n            <TokenSymbol symbol={bank.depositToken.symbol} />\r\n          \r\n            <Value value={getDisplayBalance(stakedBalance, bank.depositToken.decimal)} />\r\n            <Label text={`≈ $${earnedInDollars}`} />\r\n            <Label text={`${bank.depositTokenName} Staked`} />\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            {approveStatus !== ApprovalState.APPROVED ? (\r\n              <Button\r\n                disabled={\r\n                  bank.closedForStaking ||\r\n                  approveStatus === ApprovalState.PENDING ||\r\n                  approveStatus === ApprovalState.UNKNOWN\r\n                }\r\n                onClick={approve}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                style={{ marginTop: '20px' }}\r\n              >\r\n                {`Approve ${bank.depositTokenName}`}\r\n              </Button>\r\n            ) : (\r\n              <>\r\n                <IconButton onClick={onPresentWithdraw}>\r\n                  <RemoveIcon />\r\n                </IconButton>\r\n                <StyledActionSpacer />\r\n                <IconButton\r\n                  disabled={bank.closedForStaking}\r\n                  onClick={() => (bank.closedForStaking ? null : onPresentZap())}\r\n                >\r\n                  <FlashOnIcon style={{ color: themeColor.grey[400] }} />\r\n                </IconButton>\r\n                <StyledActionSpacer />\r\n                <IconButton\r\n                  disabled={bank.closedForStaking}\r\n                  onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\r\n                >\r\n                  <AddIcon />\r\n                </IconButton>\r\n              </>\r\n            )}\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useContext } from 'react';\r\nimport { Context as BanksContext } from '../contexts/Banks';\r\nimport { Bank, ContractName } from '../tomb-finance';\r\n\r\nconst useBank = (contractName: ContractName): Bank => {\r\n  const { banks } = useContext(BanksContext);\r\n  return banks.find((bank) => bank.contract === contractName);\r\n};\r\n\r\nexport default useBank;\r\n","import { useCallback, useState, useEffect } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport { PoolStats } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useStatsForPool = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n\r\n  const [poolAPRs, setPoolAPRs] = useState<PoolStats>();\r\n\r\n  const fetchAPRsForPool = useCallback(async () => {\r\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\r\n  }, [tombFinance, bank]);\r\n\r\n  useEffect(() => {\r\n    fetchAPRsForPool().catch((err) => console.error(`Failed to fetch TBOND price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\r\n\r\n  return poolAPRs;\r\n};\r\n\r\nexport default useStatsForPool;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeem = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.exit(bank.contract, bank.poolId), `Redeem ${bank.contract}`);\r\n  }, [bank, tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeem;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { useWallet } from 'use-wallet';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Box, Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Spacer from '../../components/Spacer';\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport useBank from '../../hooks/useBank';\r\nimport useStatsForPool from '../../hooks/useStatsForPool';\r\nimport useRedeem from '../../hooks/useRedeem';\r\nimport { Bank as BankEntity } from '../../tomb-finance';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Bank: React.FC = () => {\r\n  useEffect(() => window.scrollTo(0, 0));\r\n  const classes = useStyles();\r\n  const { bankId } = useParams<{ bankId: string }>();\r\n  const bank = useBank(bankId);\r\n\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeem(bank);\r\n  const statsOnPool = useStatsForPool(bank);\r\n\r\n  const test = <PageHeader icon=\"🏦\" subtitle={`Deposit ${bank?.depositTokenName} and earn ${bank?.earnTokenName}`} title={bank?.name}/>;\r\n\r\n  return account && bank ? (\r\n    <>\r\n      <Box>\r\n        <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '50px' }}>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>Daily APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.dailyAPR}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>TVL</Typography>\r\n                <Typography>${statsOnPool?.TVL}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box mt={5}>\r\n        <StyledBank>\r\n          <StyledCardsWrapper>\r\n            <StyledCardWrapper>\r\n              <Harvest bank={bank} />\r\n            </StyledCardWrapper>\r\n            <Spacer />\r\n            <StyledCardWrapper>{<Stake bank={bank} />}</StyledCardWrapper>\r\n          </StyledCardsWrapper>\r\n          <Spacer size=\"lg\" />\r\n          {bank.depositTokenName.includes('LP') && <LPTokenHelpText bank={bank} />}\r\n          <Spacer size=\"lg\" />\r\n          <div>\r\n            <Button onClick={onRedeem} color=\"primary\" variant=\"contained\">\r\n              Claim & Withdraw\r\n            </Button>\r\n          </div>\r\n          <Spacer size=\"lg\" />\r\n        </StyledBank>\r\n      </Box>\r\n    </>\r\n  ) : !bank ? (\r\n    <BankNotFound />\r\n  ) : (\r\n    <UnlockWallet />\r\n  );\r\n};\r\n\r\nconst LPTokenHelpText: React.FC<{ bank: BankEntity }> = ({ bank }) => {\r\n  const tombFinance = useTombFinance();\r\n  const tombAddr = tombFinance.DANTE.address;\r\n  const tshareAddr = tombFinance.TSHARE.address;\r\n\r\n  let pairName: string;\r\n  let uniswapUrl: string;\r\n  if (bank.depositTokenName.includes('DANTE')) {\r\n    pairName = 'TOMB-FTM pair';\r\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tombAddr;\r\n  } else {\r\n    pairName = 'TSHARE-FTM pair';\r\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tshareAddr;\r\n  }\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <StyledLink href={uniswapUrl} target=\"_blank\">\r\n          {`👻 Provide liquidity for ${pairName} now on SpookySwap 👻`}\r\n        </StyledLink>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst BankNotFound = () => {\r\n  return (\r\n    <Center>\r\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"You've hit a bank just robbed by unicorns.\" />\r\n    </Center>\r\n  );\r\n};\r\n\r\nconst StyledBank = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  font-weight: 700;\r\n  text-decoration: none;\r\n  color: ${(props) => props.theme.color.primary.main};\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst Center = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Bank;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Box, Button, Card, CardActions, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\nimport TokenSymbol from '../../components/TokenSymbol';\r\n\r\nconst CemeteryCard = ({ bank }) => {\r\n  return (\r\n    <Grid item xs={12} md={4} lg={4}>\r\n      <Card className='.custom-dante-box' variant=\"outlined\">\r\n        <CardContent>\r\n          <Box style={{ position: 'relative' }}>\r\n            <Box\r\n              style={{\r\n                position: 'absolute',\r\n                right: '0px',\r\n                top: '-5px',\r\n                height: '48px',\r\n                width: '48px',\r\n                \r\n                alignItems: 'center',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n              }}\r\n            >\r\n              <TokenSymbol size={64} symbol={bank.depositTokenName} />\r\n            </Box>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              {bank.depositTokenName}\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {/* {bank.name} */}\r\n              Deposit {bank.depositTokenName.toUpperCase()} Earn {` ${bank.earnTokenName}`}\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n        <CardActions style={{ justifyContent: 'flex-end' }}>\r\n          <Button color=\"primary\" size=\"small\" variant=\"contained\" component={Link} to={`/cemetery/${bank.contract}`}>\r\n            View\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CemeteryCard;\r\n","import { useContext } from 'react';\r\nimport { Context as BanksContext } from '../contexts/Banks';\r\n\r\nconst useBanks = () => {\r\n  const { banks } = useContext(BanksContext);\r\n  return [banks];\r\n};\r\n\r\nexport default useBanks;\r\n","import React from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport Bank from '../Bank';\r\n\r\nimport { Box, Container, Typography, Grid } from '@material-ui/core';\r\n\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\nimport CemeteryCard from './CemeteryCard';\r\nimport CemeteryImage from '../../assets/img/purgatory.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nimport useBanks from '../../hooks/useBanks';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background: url(${CemeteryImage}) no-repeat !important;\r\n    background-size: cover !important;\r\n  }\r\n`;\r\n\r\nconst Cemetery = () => {\r\n  const [banks] = useBanks();\r\n  const { path } = useRouteMatch();\r\n  const { account } = useWallet();\r\n  const activeBanks = banks.filter((bank) => !bank.finished);\r\n  return (\r\n    <Switch>\r\n      <Page>\r\n        <Route exact path={path}>\r\n          <BackgroundImage />\r\n          {!!account ? (\r\n            <Container maxWidth=\"lg\">\r\n              <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\r\n                Purgatory\r\n              </Typography>\r\n\r\n              <Box mt={5}>\r\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 2).length === 0}>\r\n                  <Typography color=\"textPrimary\" variant=\"h4\" gutterBottom>\r\n                    Earn TSHARE by staking LP\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    {activeBanks\r\n                      .filter((bank) => bank.sectionInUI === 2)\r\n                      .map((bank) => (\r\n                        <React.Fragment key={bank.name}>\r\n                          <CemeteryCard bank={bank} />\r\n                        </React.Fragment>\r\n                      ))}\r\n                  </Grid>\r\n                </div>\r\n\r\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 1).length === 0}>\r\n                  <Typography color=\"textPrimary\" variant=\"h4\" gutterBottom style={{ marginTop: '20px' }}>\r\n                    Earn TOMB by staking LP\r\n                  </Typography>\r\n                  <Alert variant=\"filled\" severity=\"warning\">\r\n                    All below pools have ended. Please unstake and collect your rewards.\r\n                  </Alert>\r\n                  <Grid container spacing={3} style={{ marginTop: '20px' }}>\r\n                    {activeBanks\r\n                      .filter((bank) => bank.sectionInUI === 1)\r\n                      .map((bank) => (\r\n                        <React.Fragment key={bank.name}>\r\n                          <CemeteryCard bank={bank} />\r\n                        </React.Fragment>\r\n                      ))}\r\n                  </Grid>\r\n                </div>\r\n\r\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 0).length === 0}>\r\n                  <Typography color=\"textPrimary\" variant=\"h4\" gutterBottom style={{ marginTop: '20px' }}>\r\n                    Genesis Pools\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    {activeBanks\r\n                      .filter((bank) => bank.sectionInUI === 0)\r\n                      .map((bank) => (\r\n                        <React.Fragment key={bank.name}>\r\n                          <CemeteryCard bank={bank} />\r\n                        </React.Fragment>\r\n                      ))}\r\n                  </Grid>\r\n                </div>\r\n              </Box>\r\n            </Container>\r\n          ) : (\r\n            <UnlockWallet />\r\n          )}\r\n        </Route>\r\n        <Route path={`${path}/:bankId`}>\r\n          <BackgroundImage />\r\n          <Bank />\r\n        </Route>\r\n      </Page>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Cemetery;\r\n"],"sourceRoot":""}