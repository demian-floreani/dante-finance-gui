{"version":3,"sources":["hooks/useHandleTransactionReceipt.ts","state/transactions/hooks.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/ModalActions/ModalActions.tsx","hooks/useAllowance.ts","hooks/useTombStats.ts","hooks/useLpStats.ts","hooks/useZap.ts","hooks/useBondStats.ts","hooks/usetShareStats.ts","hooks/useApproveZapper.ts","views/Bank/components/ZapModal.tsx","assets/img/HOME1900x1080.png","components/CardIcon/CardIcon.tsx","hooks/useTotalValueLocked.ts","views/Home/Home.js"],"names":["useHandleTransactionReceipt","addTransaction","useTransactionAdder","addPopup","useAddPopup","useCallback","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","console","error","stack","useWallet","chainId","account","dispatch","useDispatch","response","approval","hash","Error","from","useAllTransactions","state","useSelector","transactions","useHasPendingApproval","tokenAddress","spender","allTransactions","useMemo","Object","keys","some","receipt","Date","getTime","addedTime","isTransactionRecent","StyledInputWrapper","styled","div","props","theme","color","grey","borderRadius","spacing","StyledInput","input","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","TokenInput","max","symbol","onSelectMax","toLocaleString","Button","size","variant","onClick","StyledModalActions","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useAllowance","token","pendingApproval","useState","allowance","setAllowance","fetchAllowance","a","useEffect","log","useTombStats","stat","setStat","tombFinance","useTombFinance","fetchCashPrice","getDanteStat","refreshInterval","setInterval","config","clearInterval","useLpStats","lpTicker","getLPStat","useZap","bank","handleTransactionReceipt","onZap","zappingToken","tokenName","amount","zapIn","depositTokenName","useBondStats","fetchBondPrice","getBondStat","useShareStats","fetchSharePrice","getShareStat","ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","useApproveZapper","FTM_TICKER","FTM","TOMB_TICKER","DANTE","TSHARE_TICKER","TSHARE","address","ZAPPER_ROUTER_ADDR","currentAllowance","approvalState","APPROVED","lt","PENDING","NOT_APPROVED","UNKNOWN","approve","StyledActionSpacer","StyledDescriptionText","StyledMenuItem","withStyles","root","backgroundColor","selected","MenuItem","ZapModal","onConfirm","onDismiss","decimals","balance","ftmBalance","Number","toFixed","toString","tombBalance","useTokenBalance","tshareBalance","val","setVal","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","tombFtmLpStats","tShareFtmLpStats","tombLPStats","tshareLPStats","ftmAmountPerLP","startsWith","ftmAmount","handleChange","e","currentTarget","n","isNaN","parseFloat","isFinite","estimateZapIn","String","estimateZap","handleSelectMax","Modal","ModalTitle","text","Typography","align","target","rel","href","InputLabel","style","id","Select","event","getDisplayBalance","labelId","Label","Alert","severity","module","exports","white","useTotalValueLocked","totalValueLocked","setTotalValueLocked","fetchTVL","getTotalValueLocked","BackgroundImage","createGlobalStyle","HomeImage","useStyles","makeStyles","button","breakpoints","down","marginTop","Home","tomb","tShare","classes","TVL","tombStats","tShareStats","usetShareStats","tBondStats","tombProd","tShareProd","buyTombAddress","buyTShareAddress","tombPriceInDollars","priceInDollars","tombPriceInFTM","tokenInFtm","tombCirculatingSupply","circulatingSupply","tombTotalSupply","totalSupply","tSharePriceInDollars","tSharePriceInFTM","tShareCirculatingSupply","tShareTotalSupply","tBondPriceInDollars","tBondPriceInFTM","tBondCirculatingSupply","tBondTotalSupply","tombLpZap","tshareLpZap","useModal","onDissmissTombZap","onDissmissTshareZap","Page","Grid","container","item","xs","sm","justify","width","paddingTop","src","CashImage","Paper","className","Box","p","margin","display","Card","CardContent","fontSize","end","separator","prefix","height","marginRight","position","watchAssetInMetamask","top","right","alt","MetamaskFox","mt","TokenSymbol","alignContent","tokenAmount","priceOfOne","totalLiquidity"],"mappings":"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","file":"static/js/7.06aa0905.chunk.js","sourcesContent":["import { useCallback } from 'react';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { useTransactionAdder } from '../state/transactions/hooks';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, { summary }))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({ error: { message, stack: err.message || err.stack } });\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import { TransactionResponse } from '@ethersproject/providers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { addTransaction, clearAllTransactions } from './actions';\r\nimport { TransactionDetails } from './reducer';\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\r\n) => void {\r\n  const { chainId, account } = useWallet();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\r\n    ) => {\r\n      if (!account) return;\r\n      if (!chainId) return;\r\n\r\n      const { hash } = response;\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.');\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }));\r\n    },\r\n    [dispatch, chainId, account],\r\n  );\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useWallet();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  return chainId ? state[chainId] ?? {} : {};\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions();\r\n  if (!transactionHash || !transactions[transactionHash]) {\r\n    return false;\r\n  }\r\n  return !transactions[transactionHash].receipt;\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000;\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions();\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash];\r\n        if (!tx) return false;\r\n        if (tx.receipt) {\r\n          return false;\r\n        } else {\r\n          const approval = tx.approval;\r\n          if (!approval) return false;\r\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\r\n        }\r\n      }),\r\n    [allTransactions, spender, tokenAddress],\r\n  );\r\n}\r\n\r\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\r\n  const { chainId } = useWallet();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return {\r\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({ chainId })), [dispatch, chainId]),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode;\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n  startAdornment?: React.ReactNode;\r\n  value: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  );\r\n};\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[200]};\r\n  border-radius: ${(props) => props.theme.borderRadius}px;\r\n  display: flex;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.color.grey[600]};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`;\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length;\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <StyledSpacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  );\r\n};\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[100]}00;\r\n  display: flex;\r\n  height: 96px;\r\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\r\n    ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ModalActions;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\r\n  const [allowance, setAllowance] = useState<BigNumber>(null);\r\n  const { account } = useWallet();\r\n\r\n  const fetchAllowance = useCallback(async () => {\r\n    const allowance = await token.allowance(account, spender);\r\n    setAllowance(allowance);\r\n  }, [account, spender, token]);\r\n\r\n  useEffect(() => {\r\n    if (account && spender && token) {\r\n      fetchAllowance().catch((err) => console.log(`Failed to fetch allowance: ${err.stack}`));\r\n    }\r\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\r\n\r\n  return allowance;\r\n};\r\n\r\nexport default useAllowance;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    setStat(await tombFinance.getDanteStat());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchCashPrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { LPStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useLpStats = (lpTicker: string) => {\r\n  const [stat, setStat] = useState<LPStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    setStat(await tombFinance.getLPStat(lpTicker));\r\n  }, [tombFinance, lpTicker]);\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchCashPrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useLpStats;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useZap = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleZap = useCallback(\r\n    (zappingToken: string, tokenName: string, amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.zapIn(zappingToken, tokenName, amount),\r\n        `Zap ${amount} in ${bank.depositTokenName}.`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onZap: handleZap };\r\n};\r\n\r\nexport default useZap;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useBondStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchBondPrice = useCallback(async () => {\r\n    setStat(await tombFinance.getBondStat());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchBondPrice().catch((err) => console.error(`Failed to fetch TBOND price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchBondPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchBondPrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useBondStats;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useShareStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchSharePrice = useCallback(async () => {\r\n    setStat(await tombFinance.getShareStat());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchSharePrice().catch((err) => console.error(`Failed to fetch TSHARE price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchSharePrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchSharePrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useShareStats;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\nimport { FTM_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\r\nimport useTombFinance from './useTombFinance';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\r\n  const tombFinance = useTombFinance();\r\n  let token: ERC20;\r\n  if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\r\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.DANTE;\r\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\r\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\r\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: ZAPPER_ROUTER_ADDR,\r\n      },\r\n    });\r\n  }, [approvalState, token, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApproveZapper;\r\n","import React, { useState, useMemo } from 'react';\r\n\r\nimport { Button, Select, MenuItem, InputLabel, Typography, withStyles } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\nimport styled from 'styled-components';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport Label from '../../../components/Label';\r\nimport useLpStats from '../../../hooks/useLpStats';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport { useWallet } from 'use-wallet';\r\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\r\nimport { TOMB_TICKER, TSHARE_TICKER, FTM_TICKER } from '../../../utils/constants';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\ninterface ZapProps extends ModalProps {\r\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\r\n  tokenName?: string;\r\n  decimals?: number;\r\n}\r\n\r\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\r\n  const tombFinance = useTombFinance();\r\n  const { balance } = useWallet();\r\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\r\n  const tombBalance = useTokenBalance(tombFinance.DANTE);\r\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\r\n  const [val, setVal] = useState('');\r\n  const [zappingToken, setZappingToken] = useState(FTM_TICKER);\r\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\r\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\r\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\r\n  const tombFtmLpStats = useLpStats('DANTE-TOMB-LP');\r\n  const tShareFtmLpStats = useLpStats('GRAIL-FTM-LP');\r\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\r\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\r\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\r\n  /**\r\n   * Checks if a value is a valid number or not\r\n   * @param n is the value to be evaluated for a number\r\n   * @returns\r\n   */\r\n  function isNumeric(n: any) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n  const handleChangeAsset = (event: any) => {\r\n    const value = event.target.value;\r\n    setZappingToken(value);\r\n    setZappingTokenBalance(ftmBalance);\r\n    if (event.target.value === TSHARE_TICKER) {\r\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\r\n    }\r\n    if (event.target.value === TOMB_TICKER) {\r\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\r\n    }\r\n  };\r\n\r\n  const handleChange = async (e: any) => {\r\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\r\n      setVal(e.currentTarget.value);\r\n      setEstimate({ token0: '0', token1: '0' });\r\n    }\r\n    if (!isNumeric(e.currentTarget.value)) return;\r\n    setVal(e.currentTarget.value);\r\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\r\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\r\n  };\r\n\r\n  const handleSelectMax = async () => {\r\n    setVal(zappingTokenBalance);\r\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\r\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\r\n  };\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Zap in ${tokenName}`} />\r\n      <Typography variant=\"h6\" align=\"center\">\r\n        Powered by{' '}\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlnl.finance\">\r\n          mlnl.finance\r\n        </a>\r\n      </Typography>\r\n\r\n      <StyledActionSpacer />\r\n      <InputLabel style={{ color: '#2c2560' }} id=\"label\">\r\n        Select asset to zap with\r\n      </InputLabel>\r\n      <Select\r\n        onChange={handleChangeAsset}\r\n        style={{ color: '#2c2560' }}\r\n        labelId=\"label\"\r\n        id=\"select\"\r\n        value={zappingToken}\r\n      >\r\n        <StyledMenuItem value={FTM_TICKER}>FTM</StyledMenuItem>\r\n        <StyledMenuItem value={TOMB_TICKER}>TOMB</StyledMenuItem>\r\n        <StyledMenuItem value={TSHARE_TICKER}>TSHARE</StyledMenuItem>\r\n      </Select>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={zappingTokenBalance}\r\n        symbol={zappingToken}\r\n      />\r\n      <Label text=\"Zap Estimations\" />\r\n      <StyledDescriptionText>\r\n        {' '}\r\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\r\n      </StyledDescriptionText>\r\n      <StyledDescriptionText>\r\n        {' '}\r\n        ({Number(estimate.token0)} {FTM_TICKER} / {Number(estimate.token1)}{' '}\r\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\r\n      </StyledDescriptionText>\r\n      <ModalActions>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() =>\r\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\r\n          }\r\n        >\r\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\r\n        </Button>\r\n      </ModalActions>\r\n\r\n      <StyledActionSpacer />\r\n      <Alert variant=\"filled\" severity=\"warning\">\r\n        Beta feature. Use at your own risk!\r\n      </Alert>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledDescriptionText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 22px;\r\n  justify-content: flex-start;\r\n`;\r\nconst StyledMenuItem = withStyles({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    color: '#2c2560',\r\n    '&:hover': {\r\n      backgroundColor: 'grey',\r\n      color: '#2c2560',\r\n    },\r\n    selected: {\r\n      backgroundColor: 'black',\r\n    },\r\n  },\r\n})(MenuItem);\r\n\r\nexport default ZapModal;\r\n","module.exports = __webpack_public_path__ + \"static/media/HOME1900x1080.3e2a7cb9.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CardIconProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\r\n\r\nconst StyledCardIcon = styled.div`\r\n  background-color: ${(props) => props.theme.color.white};\r\n  font-size: 36px;\r\n  height: 120px;\r\n  width: 120px;\r\n  border-radius: 40px;\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  box-shadow: inset 4px 4px 8px ${(props) => props.theme.color.grey[300]},\r\n    inset -6px -6px 12px ${(props) => props.theme.color.grey[100]};\r\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nexport default CardIcon;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nconst useTotalValueLocked = () => {\r\n  const [totalValueLocked, setTotalValueLocked] = useState<Number>(0);\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchTVL = useCallback(async () => {\r\n    setTotalValueLocked(await tombFinance.getTotalValueLocked());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchTVL().catch((err) => console.error(`Failed to fetch Total value locked: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchTVL, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setTotalValueLocked, tombFinance, fetchTVL]);\r\n\r\n  return totalValueLocked;\r\n};\r\n\r\nexport default useTotalValueLocked;\r\n","import React, { useMemo } from 'react';\r\nimport Page from '../../components/Page';\r\nimport HomeImage from '../../assets/img/HOME1900x1080.png';\r\nimport CashImage from '../../assets/img/dante.svg';\r\nimport Image from 'material-ui-image';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport CountUp from 'react-countup';\r\nimport CardIcon from '../../components/CardIcon';\r\nimport TokenSymbol from '../../components/TokenSymbol';\r\nimport useTombStats from '../../hooks/useTombStats';\r\nimport useLpStats from '../../hooks/useLpStats';\r\nimport useModal from '../../hooks/useModal';\r\nimport useZap from '../../hooks/useZap';\r\nimport useBondStats from '../../hooks/useBondStats';\r\nimport usetShareStats from '../../hooks/usetShareStats';\r\nimport useTotalValueLocked from '../../hooks/useTotalValueLocked';\r\nimport { Dante as tombTesting, Grail as tShareTesting } from '../../tomb-finance/deployments/deployments.testing.json';\r\nimport { Dante as tombProd, Grail as tShareProd } from '../../tomb-finance/deployments/deployments.testing.json';\r\n\r\nimport MetamaskFox from '../../assets/img/metamask-fox.svg';\r\n\r\nimport { Box, Button, Card, CardContent, Grid, Paper } from '@material-ui/core';\r\n\r\n\r\nimport ZapModal from '../Bank/components/ZapModal';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    background: url(${HomeImage}) no-repeat !important;\r\n    background-size: cover !important;\r\n  }\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    [theme.breakpoints.down('415')]: {\r\n      marginTop: '10px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  const TVL = useTotalValueLocked();\r\n  const tombFtmLpStats = useLpStats('DANTE-TOMB-LP');\r\n  const tShareFtmLpStats = useLpStats('GRAIL-FTM-LP');\r\n  const tombStats = useTombStats();\r\n  const tShareStats = usetShareStats();\r\n  const tBondStats = useBondStats();\r\n  const tombFinance = useTombFinance();\r\n\r\n  let tomb;\r\n  let tShare;\r\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n    tomb = tombTesting;\r\n    tShare = tShareTesting;\r\n  } else {\r\n    tomb = tombProd;\r\n    tShare = tShareProd;\r\n  }\r\n\r\n  const buyTombAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tomb.address;\r\n  const buyTShareAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tShare.address;\r\n  const danteGraph = 'https://dexscreener.com/';\r\n  const grailGraph = 'https://dexscreener.com/';\r\n\r\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\r\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\r\n  const tombPriceInDollars = useMemo(\r\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n    [tombStats],\r\n  );\r\n  const tombPriceInFTM = useMemo(() => (tombStats ? Number(tombStats.tokenInFtm).toFixed(2) : null), [tombStats]);\r\n  const tombCirculatingSupply = useMemo(() => (tombStats ? String(tombStats.circulatingSupply) : null), [tombStats]);\r\n  const tombTotalSupply = useMemo(() => (tombStats ? String(tombStats.totalSupply) : null), [tombStats]);\r\n\r\n  const tSharePriceInDollars = useMemo(\r\n    () => (tShareStats ? Number(tShareStats.priceInDollars).toFixed(2) : null),\r\n    [tShareStats],\r\n  );\r\n  const tSharePriceInFTM = useMemo(\r\n    () => (tShareStats ? Number(tShareStats.tokenInFtm).toFixed(2) : null),\r\n    [tShareStats],\r\n  );\r\n  const tShareCirculatingSupply = useMemo(\r\n    () => (tShareStats ? String(tShareStats.circulatingSupply) : null),\r\n    [tShareStats],\r\n  );\r\n  const tShareTotalSupply = useMemo(() => (tShareStats ? String(tShareStats.totalSupply) : null), [tShareStats]);\r\n\r\n  const tBondPriceInDollars = useMemo(\r\n    () => (tBondStats ? Number(tBondStats.priceInDollars).toFixed(2) : null),\r\n    [tBondStats],\r\n  );\r\n  const tBondPriceInFTM = useMemo(() => (tBondStats ? Number(tBondStats.tokenInFtm).toFixed(2) : null), [tBondStats]);\r\n  const tBondCirculatingSupply = useMemo(\r\n    () => (tBondStats ? String(tBondStats.circulatingSupply) : null),\r\n    [tBondStats],\r\n  );\r\n  const tBondTotalSupply = useMemo(() => (tBondStats ? String(tBondStats.totalSupply) : null), [tBondStats]);\r\n\r\n  const tombLpZap = useZap({ depositTokenName: 'DANTE-TOMB-LP' });\r\n  const tshareLpZap = useZap({ depositTokenName: 'GRAIL-FTM-LP' });\r\n\r\n  const [onPresentTombZap, onDissmissTombZap] = useModal(\r\n    <ZapModal\r\n      decimals={18}\r\n      onConfirm={(zappingToken, tokenName, amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        tombLpZap.onZap(zappingToken, tokenName, amount);\r\n        onDissmissTombZap();\r\n      }}\r\n      tokenName={'DANTE-TOMB-LP'}\r\n    />,\r\n  );\r\n\r\n  const [onPresentTshareZap, onDissmissTshareZap] = useModal(\r\n    <ZapModal\r\n      decimals={18}\r\n      onConfirm={(zappingToken, tokenName, amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        tshareLpZap.onZap(zappingToken, tokenName, amount);\r\n        onDissmissTshareZap();\r\n      }}\r\n      tokenName={'GRAIL-FTM-LP'}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n      <Grid container spacing={3}>\r\n        {/* Logo */}\r\n        <Grid container item xs={12} sm={4} justify=\"center\">\r\n          {/* <Paper>xs=6 sm=3</Paper> */}\r\n          <Image color=\"none\" style={{ width: '300px', paddingTop: '0px' }} src={CashImage} />\r\n        </Grid>\r\n        {/* Explanation text */}\r\n        <Grid item xs={12} sm={8}>\r\n          <Paper className='danteCard'>\r\n            <Box p={4}>\r\n              <h2>Welcome to Dante Finance</h2>\r\n              <p>Join Dante's epic journey from Inferno to Eden. $DANTE is a new token pegged to $TOMB with future NFT utility.</p>\r\n              <p>Stake your GRAIL in Eden to earn inflationary DANTE rewards or provide liquidity on pairs and start earning today!</p>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid container spacing={3}>\r\n          <Grid item  xs={12} sm={12} justify=\"center\"  style={{ margin: '12px', display: 'flex' }}>\r\n          <Alert variant=\"filled\" severity=\"warning\">\r\n              <b>Please visit our <a target=\"_blank\" href=\"https://dantefinance.gitbook.io/dantefinance.com/\">documentation</a> before purchasing DANTE or GRAILs!</b>\r\n          </Alert>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* TVL */}\r\n        <Grid item xs={12} sm={4}>\r\n          <Card className='danteCard'>\r\n            <CardContent align=\"center\">\r\n              <h4>Total Value Locked</h4>\r\n              <CountUp style={{ fontSize: '20px' }} end={TVL} separator=\",\" prefix=\"$\" />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Wallet */}\r\n        <Grid item xs={12} sm={8}>\r\n          <Card className='danteCard' style={{ height: '100%' }}>\r\n            <CardContent align=\"center\" style={{ marginTop: '2.5%' }}>\r\n              <Button \r\n                color=\"primary\" \r\n                href=\"/masonry\" \r\n                variant=\"contained\" \r\n                style={{ marginRight: '10px' }}>Stake Now</Button>\r\n              <Button \r\n                href=\"/cemetery\" \r\n                variant=\"contained\" \r\n                className={classes.button} \r\n                style={{ marginRight: '10px' }}>Farm Now</Button>\r\n              <Button\r\n                color=\"primary\"\r\n                target=\"_blank\"\r\n                href={buyTombAddress}\r\n                variant=\"contained\"\r\n                style={{ marginRight: '10px' }}\r\n              >Buy TOMB</Button>\r\n              <Button \r\n                variant=\"contained\" \r\n                target=\"_blank\" \r\n                href={buyTShareAddress} \r\n                className={classes.button} \r\n                style={{ marginRight: '10px' }}>Buy GRAIL</Button>\r\n              <Button \r\n                color=\"primary\"\r\n                variant=\"contained\" \r\n                target=\"_blank\" \r\n                href={danteGraph} \r\n                className={classes.button} \r\n                style={{ marginRight: '10px' }}>Dante Graph</Button>\r\n              <Button \r\n                variant=\"contained\" \r\n                target=\"_blank\" \r\n                href={grailGraph} \r\n                className={classes.button}>Grail Graph</Button>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* TOMB */}\r\n        <Grid item xs={12} sm={4}>\r\n          <Card className='danteCard'>\r\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\r\n              <h4>1 DANTE</h4>\r\n              <Button\r\n                onClick={() => {\r\n                  tombFinance.watchAssetInMetamask('DANTE');\r\n                }}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                style={{ position: 'absolute', top: '10px', right: '10px' }}\r\n              >\r\n                +&nbsp;\r\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\r\n              </Button>\r\n              <Box mt={2}>\r\n                <TokenSymbol symbol=\"DANTE\" />\r\n              </Box>\r\n              <Box mt={0}>\r\n                <span style={{ fontSize: '40px' }}>=</span>\r\n              </Box>\r\n              <Box mt={0}>\r\n                <span style={{ fontSize: '30px' }}>{tombPriceInFTM ? tombPriceInFTM : '-.--'} TOMB</span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '16px', alignContent: 'flex-start' }}>\r\n                  ${tombPriceInDollars ? tombPriceInDollars : '-.--'}\r\n                </span>\r\n              </Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Market Cap: ${(tombCirculatingSupply * tombPriceInDollars).toFixed(2)} <br />\r\n                Circulating Supply: {tombCirculatingSupply} <br />\r\n                Total Supply: {tombTotalSupply}\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* TSHARE */}\r\n        <Grid item xs={12} sm={4}>\r\n          <Card className='danteCard'>\r\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\r\n              <h4>1 GRAIL</h4>\r\n              <Button\r\n                onClick={() => {\r\n                  tombFinance.watchAssetInMetamask('GRAIL');\r\n                }}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                style={{ position: 'absolute', top: '10px', right: '10px' }}\r\n              >\r\n                +&nbsp;\r\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\r\n              </Button>\r\n              <Box mt={2}>\r\n                <TokenSymbol symbol=\"GRAIL\" />\r\n              </Box>\r\n              <Box mt={0}>\r\n                <span style={{ fontSize: '40px' }}>=</span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '30px' }}>{tSharePriceInFTM ? tSharePriceInFTM : '-.--'} FTM</span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '16px' }}>${tSharePriceInDollars ? tSharePriceInDollars : '-.--'}</span>\r\n              </Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Market Cap: ${(tShareCirculatingSupply * tSharePriceInDollars).toFixed(2)} <br />\r\n                Circulating Supply: {tShareCirculatingSupply} <br />\r\n                Total Supply: {tShareTotalSupply}\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* TBOND */}\r\n        <Grid item xs={12} sm={4}>\r\n          <Card className='danteCard'>\r\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\r\n              <h4>1 DBOND</h4>\r\n              <Button\r\n                onClick={() => {\r\n                  tombFinance.watchAssetInMetamask('DBOND');\r\n                }}\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                style={{ position: 'absolute', top: '10px', right: '10px' }}\r\n              >\r\n                +&nbsp;\r\n                <img alt=\"metamask fox\" style={{ width: '20px' }} src={MetamaskFox} />\r\n              </Button>\r\n              <Box mt={2}>\r\n                <TokenSymbol symbol=\"DBOND\" />\r\n              </Box>\r\n              <Box mt={0}>\r\n                <span style={{ fontSize: '40px' }}>=</span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '30px' }}>{tBondPriceInFTM ? tBondPriceInFTM : '-.--'} TOMB</span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '16px' }}>${tBondPriceInDollars ? tBondPriceInDollars : '-.--'}</span>\r\n              </Box>\r\n              <span style={{ fontSize: '12px' }}>\r\n                Market Cap: ${(tBondCirculatingSupply * tBondPriceInDollars).toFixed(2)} <br />\r\n                Circulating Supply: {tBondCirculatingSupply} <br />\r\n                Total Supply: {tBondTotalSupply}\r\n              </span>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <Card className='danteCard'>\r\n            <CardContent align=\"center\">\r\n              <h4>DANTE-TOMB Spooky LP</h4>\r\n              <Box mt={2}>\r\n                <TokenSymbol symbol=\"DANTE-TOMB-LP\" />\r\n              </Box>\r\n              <Box mt={2}>\r\n                <span style={{ fontSize: '26px' }}>\r\n                  {tombLPStats?.tokenAmount ? tombLPStats?.tokenAmount : '-.--'} TOMB /{' '}\r\n                  {tombLPStats?.ftmAmount ? tombLPStats?.ftmAmount : '-.--'} FTM\r\n                </span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '16px' }}>\r\n                  ${tombLPStats?.priceOfOne ? tombLPStats.priceOfOne : '-.--'}<br />\r\n                </span>\r\n                <span style={{ fontSize: '12px' }}>\r\n                  \r\n                  Liquidity: ${tombLPStats?.totalLiquidity ? tombLPStats.totalLiquidity : '-.--'}<br />\r\n                  Total supply: {tombLPStats?.totalSupply ? tombLPStats.totalSupply : '-.--'}\r\n                </span>\r\n              </Box>\r\n\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <Card className='danteCard'>\r\n            <CardContent align=\"center\">\r\n              <h4>GRAIL-FTM Spooky LP</h4>\r\n              <Box mt={2}>\r\n                <TokenSymbol symbol=\"GRAIL-FTM-LP\" />\r\n              </Box>\r\n              <Box mt={2}>\r\n                <span style={{ fontSize: '26px' }}>\r\n                  {tshareLPStats?.tokenAmount ? tshareLPStats?.tokenAmount : '-.--'} TSHARE /{' '}\r\n                  {tshareLPStats?.ftmAmount ? tshareLPStats?.ftmAmount : '-.--'} FTM\r\n                </span>\r\n              </Box>\r\n              <Box>\r\n                <span style={{ fontSize: '16px' }}>\r\n                  ${tshareLPStats?.priceOfOne ? tshareLPStats.priceOfOne : '-.--'}<br />\r\n                </span>\r\n                <span style={{ fontSize: '12px' }}>\r\n                  Liquidity: ${tshareLPStats?.totalLiquidity ? tshareLPStats.totalLiquidity : '-.--'}<br />\r\n                  Total supply: {tshareLPStats?.totalSupply ? tshareLPStats.totalSupply : '-.--'}\r\n                </span>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"sourceRoot":""}