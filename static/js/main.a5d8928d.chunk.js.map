{"version":3,"sources":["state/transactions/actions.ts","state/application/hooks.ts","tomb-finance/config.ts","tomb-finance/ether-utils.ts","utils/provider.ts","components/TokenSymbol/TokenSymbol.tsx","hooks/useTokenBalance.ts","components/Label/Label.tsx","tomb-finance/ERC20.ts","tomb-finance/TombFinance.ts","contexts/TombFinanceProvider/TombFinanceProvider.tsx","contexts/Modals/Modals.tsx","components/WalletProviderModal/WalletCard.js","components/WalletProviderModal/WalletProviderModal.js","components/WalletProviderModal/index.js","components/Nav/AccountModal.tsx","components/Nav/AccountButton.tsx","components/Card/Card.tsx","components/Container/Container.tsx","components/Modal/Modal.tsx","components/ModalTitle/ModalTitle.tsx","hooks/useModal.ts","hooks/useEagerConnect.js","components/Footer/Footer.js","components/Footer/index.js","components/ListItemLink/index.js","components/ListItemLink/ListItemLink.js","components/Nav/Nav.tsx","components/Nav/index.ts","components/Page/Page.tsx","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","utils/formatBalance.ts","assets/img/metamask-fox.svg","assets/img/dante.svg","components/CardContent/CardContent.tsx","assets/img/twitter.svg","assets/img/telegram.svg","assets/img/discord.svg","assets/img/youtube.svg","assets/img/wallet-connect.svg","assets/img/crypto_tomb_cash.svg","assets/img/crypto_tomb_share.svg","assets/img/crypto_tomb_cash.f2b44ef4.png","assets/img/crypto_tomb_share.bf1a6c52.png","config.ts","assets/img/crypto_tomb_bond.svg","assets/img/ftm_logo_blue.svg","assets/img/USDC.svg","assets/img/grail.svg","assets/img/dbond.svg","assets/img/dante_tomb.svg","assets/img/grail_ftm.svg","assets/img/dante_grail.svg","assets/img/regulations_bg.png","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","views/Regulations/Regulations.js","App.tsx","serviceWorker.js","index.tsx","utils/constants.ts","hooks/useTombFinance.ts"],"names":["addTransaction","createAction","clearAllTransactions","finalizeTransaction","checkedTransaction","useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","web3ProviderFrom","endpoint","config","ethConfig","Object","assign","includes","Web3","providers","WebsocketProvider","HttpProvider","timeout","decimalToBalance","d","decimals","parseUnits","String","getDefaultProvider","ethers","Web3Provider","defaultProvider","logosBySymbol","TOMB","tombLogo","TOMBPNG","tombLogoPNG","TSHAREPNG","tShareLogoPNG","TSHARE","tShareLogo","TBOND","tBondLogo","WFTM","wftmLogo","USDC","usdcLogo","danteTombLpLogo","grailFtmLpLogo","danteGrailLpLogo","DANTE","danteLogo","GRAIL","grailLogo","DBOND","dbondLogo","TokenSymbol","symbol","size","Error","src","alt","width","height","useTokenBalance","token","useState","BigNumber","from","balance","setBalance","tombFinance","useTombFinance","isUnlocked","fetchBalance","a","balanceOf","myAccount","useEffect","catch","err","console","error","stack","refreshInterval","setInterval","clearInterval","StyledLabel","styled","div","props","color","Label","labelColor","text","variant","customColor","useContext","ThemeContext","primary","main","ERC20","address","provider","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","formatUnits","supply","Number","toFixed","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","TombFinance","cfg","signer","contracts","externalTokens","masonryVersionOfUser","DANTETOMB_LP","FTM","deployments","entries","deployment","abi","Dante","Grail","DBond","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","log","fetchMasonryVersionOfUser","then","version","DanteRewardPool","tombRewardPoolSupply","tombCirculatingSupply","sub","getTokenPriceFromPancakeswap","priceofDanteInTomb","getTOMBPriceInDollars","tombInUSD","tokenInFtm","priceInDollars","getDisplayBalance","circulatingSupply","priceTOMBInWFTM","getWFTMPriceFromPancakeswap","priceOfOneWFTMInDollars","lpToken","lpTokenSupply","token0","startsWith","token0Amount","token1Amount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","toString","liquidity","tokenAmount","ftmAmount","priceOfOne","totalLiquidity","Treasury","getDanteStat","tombStat","getBondPremiumRate","bondTombRatio","modifier","getBalance","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","GrailRewardPool","priceInFTM","rewardPool","tShareCirculatingSupply","priceOfOneFTM","priceOfSharesInDollars","SeigniorageOracle","twap","utils","parseEther","expectedPrice","danteCirculatingSupply","getDanteUpdatedPrice","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","dantePerSecond","rewardPerSecond","tSharePerSecond","tokenName","ftmInDollars","epoch","getTombPrice","treasuryTombPrice","buyBonds","priceForTomb","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenPrice","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","currentMasonry","masonrytShareBalanceOf","masonryTVL","isDante","getFullDisplayBalance","tokenSupply","priceOfToken","tokenInLP","poolName","poolId","pendingDANTE","pendingShare","userInfo","deposit","withdraw","Masonry","tokenAERC20","tokenBERC20","lpAddress","ready","Fetcher","fetchTokenData","tokenA","tokenB","IUniswapV2Pair","getReserves","reserves0","reserves1","balances","sortsBefore","pair","Pair","TokenAmount","route","Route","midPrice","latestSnapshotIndex","masonryHistory","lastHistory","lastRewardsReceived","TOMBPrice","amountOfRewardsPerDay","realAPR","canClaimReward","canWithdraw","getStakedSharesOnMasonry","stakedAmount","notStaked","result","isOldMasonryMember","stake","getShareOf","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","Date","toNumber","prevAllocation","now","to","currentEpoch","masons","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","options","image","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","queryFilter","masonryFundEvents","events","forEach","index","push","masonryFund","args","devFund","daoFund","lpName","zapper","FTM_TICKER","estimateZapIn","SPOOKY_ROUTER_ADDR","estimate","TOMB_TICKER","estimateZapInToken","overrides","zapIn","zapInToken","Context","createContext","TombFinanceProvider","children","setTombFinance","unlockWallet","tomb","Provider","onPresent","onDismiss","StyledModalWrapper","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","WalletCard","icon","onConnect","title","ListItem","button","ListItemIcon","ListItemText","useStyles","makeStyles","theme","paper","position","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","outline","WalletProviderModal","open","handleClose","classes","Modal","aria-labelledby","aria-describedby","style","display","alignItems","justifyContent","onClose","className","List","component","aria-label","metamaskLogo","walletConnectLogo","StyledValue","grey","StyledBalance","Balances","StyledBalanceWrapper","AccountModal","tombBalance","displayTombBalance","tshareBalance","displayTshareBalance","tbondBalance","displayTbondBalance","ModalTitle","AccountButton","useModal","onPresentAccountModal","isWalletProviderOpen","setWalletProviderOpen","buttonText","Button","StyledCard","Card","StyledContainer","Container","siteWidth","StyledModal","CardContent","StyledModalTitle","topBarSize","modal","useEagerConnect","connector","localStorage","setItem","connectorId","getItem","footer","bottom","paddingTop","paddingBottom","textAlign","breakpoints","down","link","marginLeft","img","Footer","maxWidth","Grid","container","xs","Typography","align","Link","href","getFullYear","rel","target","TwitterImage","TelegramImage","YoutubeImage","DiscordImage","ListItemLink","CustomLink","forwardRef","linkProps","ref","ul","margin","listStyle","appBar","marginBottom","drawer","flexShrink","drawerPaper","hide","toolbar","flexWrap","toolbarTitle","fontFamily","fontSize","flexGrow","textTransform","textDecoration","brandLink","Nav","matches","useMediaQuery","useTheme","setOpen","handleDrawerClose","AppBar","elevation","Toolbar","noWrap","Box","mr","IconButton","edge","clsx","Drawer","onEscapeKeyDown","onBackdropClick","anchor","direction","Divider","Page","minHeight","context","banks","Banks","setBanks","fetchPools","finished","stakedBalanceOnBank","lte","earnToken","sort","b","fractionDigits","isTruncated","number","ret","length","slice","pow","module","exports","StyledCardContent","configurations","development","networkName","ftmscanUrl","require","baseLaunchDate","bondLaunchesAt","masonryLaunchesAt","production","WFTMDanteRewardPool","identifier","sectionInUI","closedForStaking","fee","USDCDanteRewardPool","TombDanteRewardPool","DanteTombLPDanteRewardPool","DanteTombLPGrailRewardPool","GrailWFTMLPGrailRewardPool","DanteGrailLPGrailRewardPool","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","getTime","createReducer","builder","addCase","transactions","payload","hash","approval","summary","txs","addedTime","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","store","configureStore","reducer","preloadedState","load","states","teal","200","borderRadius","black","100","300","400","500","600","700","800","900","purple","light","secondary","white","1","2","3","4","5","6","7","newTheme","createMuiTheme","default","dark","contrastText","disabledBackground","active","hover","typography","join","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","left","top","transform","RowNoFlex","TransactionPopup","paddingRight","StyledPopupDesc","StyledLink","span","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","removeThisPopup","popupContent","faderStyle","useSpring","duration","text2","MobilePopupWrapper","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","BackgroundImage","createGlobalStyle","RegulationsImage","StyledTableCell","withStyles","head","fontWeight","body","TableCell","gridItem","up","StyledTableRow","root","TableRow","Regulations","rows","setRows","listenForRegulationsEvents","elements","element","dao","dev","masonry","sum","gutterBottom","TableContainer","Table","table","TableHead","TableBody","row","scope","Home","lazy","Cemetery","Pit","NoMatch","Providers","connectors","walletconnect","rpcUrl","App","version_app","clear","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister","TSHARE_TICKER","ZAPPER_ROUTER_ADDR"],"mappings":"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","file":"static/js/main.a5d8928d.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n// import { ChainId } from '@uniswap/sdk';\r\n//import { ChainId } from '@spookyswap/sdk';\r\nimport { ChainId } from '@ac32/spookyswap-sdk';\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n}>('transactions/addTransaction');\r\n\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\r\n\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>('transactions/finalizeTransaction');\r\n\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>('transactions/checkedTransaction');\r\n","import { useCallback, useMemo } from 'react';\r\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../index';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const { chainId } = useWallet();\r\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\r\n}\r\n\r\nexport function useWalletModalOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.walletModalOpen);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\r\n}\r\n\r\nexport function useSettingsMenuOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({ content, key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({ key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState['application']['popupList'] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n","import { Deployments } from './deployments';\r\n// import { ChainId } from '@pancakeswap-libs/sdk';\r\n//import { ChainId } from '@spookyswap/sdk';\r\nimport { ChainId } from '@ac32/spookyswap-sdk';\r\n\r\nexport type Configuration = {\r\n  chainId: ChainId;\r\n  networkName: string;\r\n  ftmscanUrl: string;\r\n  defaultProvider: string;\r\n  deployments: Deployments;\r\n  externalTokens: { [contractName: string]: [string, number] };\r\n  config?: EthereumConfig;\r\n\r\n  baseLaunchDate: Date;\r\n  bondLaunchesAt: Date;\r\n  masonryLaunchesAt: Date;\r\n\r\n  refreshInterval: number;\r\n};\r\n\r\nexport type EthereumConfig = {\r\n  testing: boolean;\r\n  autoGasMultiplier: number;\r\n  defaultConfirmations: number;\r\n  defaultGas: string;\r\n  defaultGasPrice: string;\r\n  ethereumNodeTimeout: number;\r\n};\r\n\r\nexport const defaultEthereumConfig = {\r\n  testing: false,\r\n  autoGasMultiplier: 1.5,\r\n  defaultConfirmations: 1,\r\n  defaultGas: '6000000',\r\n  defaultGasPrice: '1000000000000',\r\n  ethereumNodeTimeout: 10000,\r\n};\r\n","import Web3 from 'web3';\r\nimport { defaultEthereumConfig, EthereumConfig } from './config';\r\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\r\nimport { BigNumber } from 'ethers';\r\n\r\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\r\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\r\n\r\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\r\n\r\n  return new providerClass(endpoint, {\r\n    timeout: ethConfig.ethereumNodeTimeout,\r\n  });\r\n}\r\n\r\nexport function balanceToDecimal(s: string): string {\r\n  return formatUnits(s);\r\n}\r\n\r\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\r\n  return parseUnits(String(d), decimals);\r\n}\r\n","import { ethers } from 'ethers';\r\nimport config from '../config';\r\nimport { web3ProviderFrom } from '../tomb-finance/ether-utils';\r\n\r\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\r\n  return new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\r\n}\r\n","import React from 'react';\r\n\r\n//Graveyard ecosystem logos\r\nimport tombLogo from '../../assets/img/crypto_tomb_cash.svg';\r\nimport tShareLogo from '../../assets/img/crypto_tomb_share.svg';\r\nimport tombLogoPNG from '../../assets/img/crypto_tomb_cash.f2b44ef4.png';\r\nimport tShareLogoPNG from '../../assets/img/crypto_tomb_share.bf1a6c52.png';\r\nimport tBondLogo from '../../assets/img/crypto_tomb_bond.svg';\r\n\r\nimport tombFtmLpLogo from '../../assets/img/tomb_ftm_lp.png';\r\nimport tshareFtmLpLogo from '../../assets/img/tshare_ftm_lp.png';\r\n\r\nimport wftmLogo from '../../assets/img/ftm_logo_blue.svg';\r\nimport usdcLogo from '../../assets/img/USDC.svg';\r\nimport zooLogo from '../../assets/img/zoo_logo.svg';\r\nimport shibaLogo from '../../assets/img/shiba_logo.svg';\r\n\r\nimport danteLogo from '../../assets/img/dante.svg';\r\nimport grailLogo from '../../assets/img/grail.svg';\r\nimport dbondLogo from '../../assets/img/dbond.svg';\r\nimport danteTombLpLogo from '../../assets/img/dante_tomb.svg';\r\nimport grailFtmLpLogo from '../../assets/img/grail_ftm.svg';\r\nimport danteGrailLpLogo from '../../assets/img/dante_grail.svg';\r\nimport danteLogoPNG from '../../assets/img/dante_500x500.png';\r\n\r\n\r\nconst logosBySymbol: { [title: string]: string } = {\r\n  //Real tokens\r\n  //=====================\r\n  TOMB: tombLogo,\r\n  TOMBPNG: tombLogoPNG,\r\n  TSHAREPNG: tShareLogoPNG,\r\n  TSHARE: tShareLogo,\r\n  TBOND: tBondLogo,  \r\n  WFTM: wftmLogo,\r\n  USDC: usdcLogo,\r\n  'DANTE-TOMB-LP': danteTombLpLogo,\r\n  'GRAIL-FTM-LP': grailFtmLpLogo,\r\n  'DANTE-GRAIL-LP': danteGrailLpLogo,\r\n\r\n  DANTE: danteLogo,\r\n  GRAIL: grailLogo,\r\n  DBOND: dbondLogo,\r\n};\r\n\r\ntype LogoProps = {\r\n  symbol: string;\r\n  size?: number;\r\n};\r\n\r\nconst TokenSymbol: React.FC<LogoProps> = ({ symbol, size = 100 }) => {\r\n  if (!logosBySymbol[symbol]) {\r\n    throw new Error(`Invalid Token Logo symbol: ${symbol}`);\r\n  }\r\n  return <img src={logosBySymbol[symbol]} alt={`${symbol} Logo`} width={size} height={size} />;\r\n};\r\n\r\nexport default TokenSymbol;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\n\r\nconst useTokenBalance = (token: ERC20) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setBalance(await token.balanceOf(tombFinance.myAccount));\r\n  }, [token, tombFinance.myAccount]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(`Failed to fetch token balance: ${err.stack}`));\r\n      let refreshInterval = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshInterval);\r\n    }\r\n  }, [isUnlocked, token, fetchBalance, tombFinance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useTokenBalance;\r\n","import React, { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\n\r\ninterface LabelProps {\r\n  text?: string;\r\n  variant?: 'primary' | 'secondary' | 'normal';\r\n  color?: string;\r\n}\r\n\r\nconst Label: React.FC<LabelProps> = ({ text, variant = 'secondary', color: customColor }) => {\r\n  const { color } = useContext(ThemeContext);\r\n\r\n  let labelColor: string;\r\n  if (customColor) {\r\n    labelColor = customColor;\r\n  } else {\r\n    if (variant === 'primary') {\r\n      labelColor = color.primary.main;\r\n    } else if (variant === 'secondary') {\r\n      labelColor = '#2c2560'; //color.secondary.main;\r\n    } else if (variant === 'normal') {\r\n      labelColor = '#2c2560'; //color.grey[300];\r\n    }\r\n  }\r\n  return <StyledLabel color={labelColor}>{text}</StyledLabel>;\r\n};\r\n\r\ninterface StyledLabelProps {\r\n  color: string;\r\n}\r\n\r\nconst StyledLabel = styled.div<StyledLabelProps>`\r\n  color: ${(props) => props.color};\r\n`;\r\n\r\nexport default Label;\r\n","import { BigNumber, Contract } from 'ethers';\r\nimport { Signer } from '@ethersproject/abstract-signer';\r\nimport { Provider } from '@ethersproject/abstract-provider';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { formatUnits } from 'ethers/lib/utils';\r\n\r\nclass ERC20 {\r\n  private contract: Contract;\r\n\r\n  address: string;\r\n  symbol: string;\r\n  decimal: number;\r\n\r\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\r\n    this.contract = new Contract(address, ABI, provider);\r\n    this.address = address;\r\n    this.symbol = symbol;\r\n    this.decimal = decimal;\r\n  }\r\n\r\n  connect(signerOrProvider: Signer | Provider) {\r\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\r\n  }\r\n\r\n  get estimateGas() {\r\n    return this.contract.estimateGas;\r\n  }\r\n\r\n  totalSupply(): Promise<BigNumber> {\r\n    return this.contract.totalSupply();\r\n  }\r\n\r\n  balanceOf(account: string): Promise<BigNumber> {\r\n    return this.contract.balanceOf(account);\r\n  }\r\n\r\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transfer(recipient, amount);\r\n  }\r\n\r\n  allowance(owner: string, spender: string): Promise<BigNumber> {\r\n    return this.contract.allowance(owner, spender);\r\n  }\r\n\r\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.approve(spender, amount);\r\n  }\r\n\r\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  async displayedBalanceOf(account: string): Promise<string> {\r\n    const balance = await this.balanceOf(account);\r\n    return formatUnits(balance, this.decimal);\r\n  }\r\n\r\n  async displayedTotalSupply(): Promise<string> {\r\n    const supply = await this.totalSupply();\r\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\r\n  }\r\n}\r\n\r\nexport default ERC20;\r\n\r\nconst ABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: 'string', name: 'name', type: 'string' },\r\n      {\r\n        internalType: 'string',\r\n        name: 'symbol',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint8',\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'addedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'increaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'subtractedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'decreaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n","import { ChainId, Fetcher, Route, Token, Pair, TokenAmount } from '@ac32/spookyswap-sdk';\r\nimport { Configuration } from './config';\r\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats } from './types';\r\nimport { BigNumber, Contract, ethers } from 'ethers';\r\nimport { decimalToBalance } from './ether-utils';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport ERC20 from './ERC20';\r\nimport { getFullDisplayBalance, getDisplayBalance, getBalance } from '../utils/formatBalance';\r\nimport { getDefaultProvider } from '../utils/provider';\r\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\r\nimport config, { bankDefinitions } from '../config';\r\nimport moment from 'moment';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\r\nimport { abi as IUniswapV2Pair } from './IUniswapV2Pair.json'\r\n\r\n/**\r\n * An API module of Tomb Finance contracts.\r\n * All contract-interacting domain logic should be defined in here.\r\n */\r\nexport class TombFinance {\r\n  myAccount: string;\r\n  provider: ethers.providers.Web3Provider;\r\n  signer?: ethers.Signer;\r\n  config: Configuration;\r\n  contracts: { [name: string]: Contract };\r\n  externalTokens: { [name: string]: ERC20 };\r\n  masonryVersionOfUser?: string;\r\n\r\n  DANTETOMB_LP: Contract;\r\n  DANTE: ERC20;\r\n  TSHARE: ERC20;\r\n  TBOND: ERC20;\r\n\r\n  FTM: ERC20;\r\n  TOMB: ERC20;\r\n\r\n  constructor(cfg: Configuration) {\r\n    const { deployments, externalTokens } = cfg;\r\n    const provider = getDefaultProvider();\r\n\r\n    // loads contracts from deployments\r\n    this.contracts = {};\r\n    for (const [name, deployment] of Object.entries(deployments)) {\r\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\r\n    }\r\n    this.externalTokens = {};\r\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\r\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\r\n    }\r\n    this.DANTE = new ERC20(deployments.Dante.address, provider, 'DANTE', 18);\r\n    this.TSHARE = new ERC20(deployments.Grail.address, provider, 'GRAIL', 18);\r\n    this.TBOND = new ERC20(deployments.DBond.address, provider, 'DBOND', 18);\r\n\r\n    this.TOMB = this.externalTokens['TOMB'];\r\n    this.FTM = this.externalTokens['WFTM'];\r\n\r\n    // Uniswap V2 Pair\r\n    this.DANTETOMB_LP = new Contract(externalTokens['DANTE-TOMB-LP'][0], IUniswapV2PairABI, provider);\r\n\r\n    this.config = cfg;\r\n    this.provider = provider;\r\n  }\r\n\r\n  /**\r\n   * @param provider From an unlocked wallet. (e.g. Metamask)\r\n   * @param account An address of unlocked wallet account.\r\n   */\r\n  unlockWallet(provider: any, account: string) {\r\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\r\n    this.signer = newProvider.getSigner(0);\r\n    this.myAccount = account;\r\n    for (const [name, contract] of Object.entries(this.contracts)) {\r\n      this.contracts[name] = contract.connect(this.signer);\r\n    }\r\n    const tokens = [this.DANTE, this.TSHARE, this.TBOND, ...Object.values(this.externalTokens)];\r\n    for (const token of tokens) {\r\n      token.connect(this.signer);\r\n    }\r\n    this.DANTETOMB_LP = this.DANTETOMB_LP.connect(this.signer);\r\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\r\n    this.fetchMasonryVersionOfUser()\r\n      .then((version) => (this.masonryVersionOfUser = version))\r\n      .catch((err) => {\r\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\r\n        this.masonryVersionOfUser = 'latest';\r\n      });\r\n  }\r\n\r\n  get isUnlocked(): boolean {\r\n    return !!this.myAccount;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //===================FROM SPOOKY TO DISPLAY =========================\r\n  //=========================IN HOME PAGE==============================\r\n  //===================================================================\r\n\r\n  async getDanteStat(): Promise<TokenStat> {\r\n    const { DanteRewardPool } = this.contracts;\r\n    const supply = await this.DANTE.totalSupply();\r\n    const tombRewardPoolSupply = await this.DANTE.balanceOf(DanteRewardPool.address);\r\n\r\n    const tombCirculatingSupply = supply\r\n      .sub(tombRewardPoolSupply);\r\n\r\n    const priceofDanteInTomb = Number(await this.getTokenPriceFromPancakeswap(\r\n      this.TOMB,\r\n      this.DANTE,\r\n      this.externalTokens['DANTE-TOMB-LP'].address));\r\n\r\n    const tombInUSD = await this.getTOMBPriceInDollars();\r\n    \r\n    return {\r\n      tokenInFtm: priceofDanteInTomb.toFixed(2),\r\n      priceInDollars: (priceofDanteInTomb * tombInUSD).toFixed(2),\r\n      totalSupply: getDisplayBalance(supply, this.DANTE.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.DANTE.decimal, 0),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the price in USD of 1 TOMB\r\n   * @returns \r\n   */\r\n  async getTOMBPriceInDollars(): Promise<number> {\r\n    // how many FTM for a TOMB\r\n    const priceTOMBInWFTM = await this.getTokenPriceFromPancakeswap(\r\n      this.FTM, \r\n      this.TOMB,\r\n      this.externalTokens['TOMB-FTM-LP'].address);\r\n\r\n    // price in USD of 1 FTM\r\n    const priceOfOneWFTMInDollars = await this.getWFTMPriceFromPancakeswap();\r\n    \r\n    // price in USD of 1 TOMB\r\n    return Number(priceTOMBInWFTM) * Number(priceOfOneWFTMInDollars);\r\n  }\r\n\r\n  /**\r\n   * Calculates various stats for the requested LP\r\n   * @param name of the LP token to load stats for\r\n   * @returns\r\n   */\r\n  async getLPStat(name: string): Promise<LPStat> {\r\n    const lpToken = this.externalTokens[name];\r\n    \r\n    const lpTokenSupply = getDisplayBalance(await lpToken.totalSupply(), 18);\r\n    \r\n    const token0 = name.startsWith('DANTE') ? this.DANTE : this.TSHARE;\r\n\r\n    const token0Amount = getDisplayBalance(await token0.balanceOf(lpToken.address), 18);\r\n\r\n    let token1Amount = token0 === this.DANTE ? \r\n      getDisplayBalance(await this.TOMB.balanceOf(lpToken.address), 18) :\r\n      getDisplayBalance(await this.FTM.balanceOf(lpToken.address), 18);\r\n\r\n    const tokenAmountInOneLP = Number(token0Amount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(token1Amount) / Number(lpTokenSupply);\r\n    \r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, token0 === this.DANTE);\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method to get price for Tomb\r\n   * @returns TokenStat for TBOND\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getBondStat(): Promise<TokenStat> {\r\n    const { Treasury } = this.contracts;\r\n    const tombStat = await this.getDanteStat();\r\n    const bondTombRatio = await Treasury.getBondPremiumRate();\r\n    let modifier = 1; // keep to 1 if no bondPremium is to be used\r\n    if (getBalance(bondTombRatio, this.DANTE.decimal) > 0) {\r\n      modifier = getBalance(bondTombRatio, this.DANTE.decimal);\r\n    }\r\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(2);\r\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\r\n    const supply = await this.TBOND.displayedTotalSupply();\r\n    return {\r\n      tokenInFtm: bondPriceInFTM,\r\n      priceInDollars: priceOfTBondInDollars,\r\n      totalSupply: supply,\r\n      circulatingSupply: supply,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns TokenStat for TSHARE\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getShareStat(): Promise<TokenStat> {\r\n    const { GrailRewardPool } = this.contracts;\r\n\r\n    const supply = await this.TSHARE.totalSupply();\r\n\r\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(\r\n      this.FTM,\r\n      this.TSHARE,\r\n      this.externalTokens['GRAIL-FTM-LP'].address);\r\n    \r\n    const rewardPool = await this.TSHARE.balanceOf(GrailRewardPool.address);\r\n    \r\n    const tShareCirculatingSupply = supply.sub(rewardPool);\r\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\r\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInFTM,\r\n      priceInDollars: priceOfSharesInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\r\n    const { SeigniorageOracle, DanteRewardPool } = this.contracts;\r\n    const expectedPrice = await SeigniorageOracle.twap(this.DANTE.address, ethers.utils.parseEther('1'));\r\n\r\n    const supply = await this.DANTE.totalSupply();\r\n\r\n    const rewardPool = await this.DANTE.balanceOf(DanteRewardPool.address);\r\n    \r\n    const danteCirculatingSupply = supply.sub(rewardPool);\r\n    \r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.DANTE.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(danteCirculatingSupply, this.DANTE.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getDanteUpdatedPrice();\r\n  }\r\n\r\n  /**\r\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\r\n   * @param bank\r\n   * @returns\r\n   */\r\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const depositToken = bank.depositToken;\r\n    const poolContract = this.contracts[bank.contract];\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\r\n    const stakeInPool = await depositToken.balanceOf(bank.address);\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const stat = bank.earnTokenName === 'DANTE' ? await this.getDanteStat() : await this.getShareStat();\r\n    const tokenPerSecond = await this.getTokenPerSecond(\r\n      bank.earnTokenName,\r\n      poolContract,\r\n      bank.depositTokenName,\r\n    );\r\n\r\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    const totalRewardPricePerYear =\r\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    const totalStakingTokenInPool =\r\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to return the amount of tokens the pool yields per second\r\n   * @param earnTokenName the name of the token that the pool is earning\r\n   * @param poolContract the actual contract of the pool\r\n   * @returns\r\n   */\r\n   async getTokenPerSecond(\r\n    earnTokenName: string,\r\n    poolContract: Contract,\r\n    depositTokenName: string,\r\n  ) {\r\n    if (earnTokenName === 'DANTE') {\r\n      const rewardPerSecond = await poolContract.dantePerSecond();\r\n\r\n      // calculate reward per second based on deposit token allocation\r\n      switch(depositTokenName){\r\n        case 'DANTE-TOMB-LP':\r\n          return rewardPerSecond.mul(10000).div(20000);\r\n        case 'USDC':\r\n          return rewardPerSecond.mul(4000).div(20000);\r\n        case 'WFTM':\r\n          return rewardPerSecond.mul(4000).div(20000);\r\n        case 'TOMB':\r\n          return rewardPerSecond.mul(2000).div(20000);\r\n        default:\r\n          return 0;\r\n      }\r\n    } else {\r\n      const rewardPerSecond = await poolContract.tSharePerSecond();\r\n\r\n      switch(depositTokenName) {\r\n        case 'DANTE-TOMB-LP':\r\n          return rewardPerSecond.mul(29750).div(59500);\r\n        case 'GRAIL-FTM-LP':\r\n          return rewardPerSecond.mul(22000).div(59500);\r\n        case 'DANTE-GRAIL-LP': \r\n          return rewardPerSecond.mul(7750).div(59500);\r\n        default:\r\n          return 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\r\n   * If the deposited token is an LP it will find the price of its pieces\r\n   * @param tokenName\r\n   * @param pool\r\n   * @param token\r\n   * @returns\r\n   */\r\n  async getDepositTokenPriceInDollars(\r\n    tokenName: string, \r\n    token: ERC20) {\r\n\r\n    switch(tokenName)\r\n    {\r\n      case 'WFTM': {\r\n        return await this.getWFTMPriceFromPancakeswap();\r\n      }\r\n      case 'DANTE-TOMB-LP': {\r\n        return await this.getLPTokenPrice(token, this.DANTE, true);\r\n      }\r\n      case 'GRAIL-FTM-LP': {\r\n        return await this.getLPTokenPrice(token, this.TSHARE, false);\r\n      }\r\n      case 'GRAIL': {\r\n        const priceInFTM = await this.getTokenPriceFromPancakeswap(\r\n          this.FTM,\r\n          this.TSHARE,\r\n          this.externalTokens['GRAIL-FTM-LP'].address);\r\n\r\n        const ftmInDollars = await this.getWFTMPriceFromPancakeswap();\r\n        \r\n        return (Number(priceInFTM) * Number(ftmInDollars)).toFixed(2);\r\n      }\r\n      case 'USDC': {\r\n        return '1';\r\n      }\r\n      default: {\r\n        return '0'\r\n      }\r\n    }\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //=========================== END ===================================\r\n  //===================================================================\r\n\r\n  async getCurrentEpoch(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.epoch();\r\n  }\r\n\r\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBondPremiumRate();\r\n  }\r\n\r\n  /**\r\n   * Buy bonds with cash.\r\n   * @param amount amount of cash to purchase bonds with.\r\n   */\r\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const treasuryTombPrice = await Treasury.getTombPrice();\r\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\r\n  }\r\n\r\n  /**\r\n   * Redeem bonds for cash.\r\n   * @param amount amount of bonds to redeem.\r\n   */\r\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const priceForTomb = await Treasury.getTombPrice();\r\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\r\n  }\r\n\r\n  async getTotalValueLocked(): Promise<Number> {\r\n    let totalValue = 0;\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      const pool = this.contracts[bankInfo.contract];\r\n      const token = this.externalTokens[bankInfo.depositTokenName];\r\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\r\n      const tokenAmountInPool = await token.balanceOf(pool.address);\r\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\r\n      const poolValue = Number.isNaN(value) ? 0 : value;\r\n      totalValue += poolValue;\r\n    }\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n\r\n    return totalValue + masonryTVL;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\r\n   * @param isTomb sanity check for usage of tomb token or tShare\r\n   * @returns price of the LP token\r\n   */\r\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isDante: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isDante === true ? await this.getDanteStat() : await this.getShareStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2); //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n    return tokenPrice.toString();\r\n  }\r\n\r\n  async earnedFromBank(\r\n    poolName: ContractName,\r\n    earnTokenName: String,\r\n    poolId: Number,\r\n    account = this.myAccount,\r\n  ): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      if (earnTokenName === 'DANTE') {\r\n        return await pool.pendingDANTE(poolId, account);\r\n      } else {\r\n        return await pool.pendingShare(poolId, account);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      let userInfo = await pool.userInfo(poolId, account);\r\n      return await userInfo.amount;\r\n    } catch (err) {\r\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deposits token to given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.deposit(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Withdraws token from given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.withdraw(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Transfers earned token reward from given pool to my account.\r\n   */\r\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\r\n    return await pool.withdraw(poolId, 0);\r\n  }\r\n\r\n  /**\r\n   * Harvests and withdraws deposited tokens from the pool.\r\n   */\r\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    let userInfo = await pool.userInfo(poolId, account);\r\n    return await pool.withdraw(poolId, userInfo.amount);\r\n  }\r\n\r\n  async fetchMasonryVersionOfUser(): Promise<string> {\r\n    return 'latest';\r\n  }\r\n\r\n  currentMasonry(): Contract {\r\n    if (!this.masonryVersionOfUser) {\r\n      //throw new Error('you must unlock the wallet to continue.');\r\n    }\r\n    return this.contracts.Masonry;\r\n  }\r\n\r\n  isOldMasonryMember(): boolean {\r\n    return this.masonryVersionOfUser !== 'latest';\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswap(\r\n    tokenAERC20: ERC20,\r\n    tokenBERC20: ERC20,\r\n    lpAddress: string): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n\r\n    const tokenA = await Fetcher.fetchTokenData(chainId, tokenAERC20.address, this.provider);\r\n    const tokenB = await Fetcher.fetchTokenData(chainId, tokenBERC20.address, this.provider);\r\n\r\n    try {\r\n      const [reserves0, reserves1] = await new Contract(\r\n        lpAddress, \r\n        IUniswapV2Pair, \r\n        this.provider)\r\n        .getReserves();\r\n\r\n      const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\r\n      const pair = new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\r\n\r\n      const route = new Route([pair], tokenB);\r\n\r\n      return route.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenA.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getWFTMPriceFromPancakeswap(): Promise<string> {\r\n\r\n    const { WFTM, USDC } = this.externalTokens;\r\n\r\n    return this.getTokenPriceFromPancakeswap(\r\n      USDC,\r\n      WFTM,\r\n      this.externalTokens['USDC-FTM-LP'].address\r\n    );\r\n  }\r\n\r\n  //===================================================================\r\n  //===================================================================\r\n  //===================== MASONRY METHODS =============================\r\n  //===================================================================\r\n  //===================================================================\r\n\r\n  async getMasonryAPR() {\r\n    const Masonry = this.currentMasonry();\r\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\r\n    const lastHistory = await Masonry.masonryHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const TOMBPrice = (await this.getDanteStat()).priceInDollars;\r\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\r\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL) * 365;\r\n    return realAPR;\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.canClaimReward(this.myAccount);\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\r\n    const result = notStaked ? true : canWithdraw;\r\n    return result;\r\n  }\r\n\r\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\r\n    // const Masonry = this.currentMasonry();\r\n    // const mason = await Masonry.masons(this.myAccount);\r\n    return BigNumber.from(0);\r\n  }\r\n\r\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.totalSupply();\r\n  }\r\n\r\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\r\n    if (this.isOldMasonryMember()) {\r\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\r\n    }\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.stake(decimalToBalance(amount));\r\n  }\r\n\r\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getShareOf(this.myAccount);\r\n    }\r\n    return await Masonry.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getEarningsOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getCashEarningsOf(this.myAccount);\r\n    }\r\n\r\n    const earned = await Masonry.earned(this.myAccount);\r\n    return earned;\r\n  }\r\n\r\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.withdraw(decimalToBalance(amount));\r\n  }\r\n\r\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.claimDividends();\r\n    }\r\n    return await Masonry.claimReward();\r\n  }\r\n\r\n  async exitFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.exit();\r\n  }\r\n\r\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\r\n    const { Treasury } = this.contracts;\r\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\r\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\r\n    const prevAllocation = new Date(Date.now());\r\n\r\n    return { from: prevAllocation, to: nextAllocation };\r\n  }\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to claim\r\n   * their reward from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\r\n    const { Masonry, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\r\n    const currentEpoch = await Masonry.epoch();\r\n    const mason = await Masonry.masons(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\r\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\r\n\r\n    const fromDate = new Date(Date.now());\r\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * periodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to unstake\r\n   * from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserUnstakeTime(): Promise<AllocationTime> {\r\n    const { Masonry, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\r\n    const currentEpoch = await Masonry.epoch();\r\n    const mason = await Masonry.masons(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const PeriodInHours = period / 60 / 60;\r\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\r\n    const fromDate = new Date(Date.now());\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * PeriodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\r\n    const { ethereum } = window as any;\r\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\r\n      let asset;\r\n      let assetUrl;\r\n      if (assetName === 'DANTE') {\r\n        asset = this.DANTE;\r\n        assetUrl = 'https://tomb.finance/presskit/tomb_icon_noBG.png';\r\n      } else if (assetName === 'GRAIL') {\r\n        asset = this.TSHARE;\r\n        assetUrl = 'https://tomb.finance/presskit/tshare_icon_noBG.png';\r\n      } else if (assetName === 'DBOND') {\r\n        asset = this.TBOND;\r\n        assetUrl = 'https://tomb.finance/presskit/tbond_icon_noBG.png';\r\n      }\r\n      await ethereum.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: {\r\n            address: asset.address,\r\n            symbol: asset.symbol,\r\n            decimals: 18,\r\n            image: assetUrl,\r\n          },\r\n        },\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @returns an array of the regulation events till the most up to date epoch\r\n   */\r\n  async listenForRegulationsEvents(): Promise<any> {\r\n    const { Treasury } = this.contracts;\r\n\r\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\r\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\r\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\r\n\r\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\r\n    var events: any[] = [];\r\n    masonryFundEvents.forEach(function callback(value, index) {\r\n      events.push({ epoch: index + 1 });\r\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\r\n    DEVFundEvents.forEach(function callback(value, index) {\r\n      events[index].devFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\r\n    DAOFundEvents.forEach(function callback(value, index) {\r\n      events[index].daoFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    return events;\r\n  }\r\n\r\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    let estimate;\r\n    if (tokenName === FTM_TICKER) {\r\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\r\n    } else {\r\n      const token = tokenName === TOMB_TICKER ? this.DANTE : this.TSHARE;\r\n      estimate = await zapper.estimateZapInToken(\r\n        token.address,\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        parseUnits(amount, 18),\r\n      );\r\n    }\r\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\r\n  }\r\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    if (tokenName === FTM_TICKER) {\r\n      let overrides = {\r\n        value: parseUnits(amount, 18),\r\n      };\r\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\r\n    } else {\r\n      const token = tokenName === TOMB_TICKER ? this.DANTE : this.TSHARE;\r\n      return await zapper.zapInToken(\r\n        token.address,\r\n        parseUnits(amount, 18),\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        this.myAccount,\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { createContext, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport TombFinance from '../../tomb-finance';\r\nimport config from '../../config';\r\n\r\nexport interface TombFinanceContext {\r\n  tombFinance?: TombFinance;\r\n}\r\n\r\nexport const Context = createContext<TombFinanceContext>({ tombFinance: null });\r\n\r\nexport const TombFinanceProvider: React.FC = ({ children }) => {\r\n  const { ethereum, account } = useWallet();\r\n  const [tombFinance, setTombFinance] = useState<TombFinance>();\r\n\r\n  useEffect(() => {\r\n    if (!tombFinance) {\r\n      const tomb = new TombFinance(config);\r\n      if (account) {\r\n        // wallet was unlocked at initialization\r\n        tomb.unlockWallet(ethereum, account);\r\n      }\r\n      setTombFinance(tomb);\r\n    } else if (account) {\r\n      tombFinance.unlockWallet(ethereum, account);\r\n    }\r\n  }, [account, ethereum, tombFinance]);\r\n\r\n  return <Context.Provider value={{ tombFinance }}>{children}</Context.Provider>;\r\n};\r\n","import React, { createContext, useCallback, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalsContext {\r\n  content?: React.ReactNode;\r\n  isOpen?: boolean;\r\n  onPresent: (content: React.ReactNode) => void;\r\n  onDismiss: () => void;\r\n}\r\n\r\nexport const Context = createContext<ModalsContext>({\r\n  onPresent: () => {},\r\n  onDismiss: () => {},\r\n});\r\n\r\nconst Modals: React.FC = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<React.ReactNode>();\r\n\r\n  const handlePresent = useCallback(\r\n    (modalContent: React.ReactNode) => {\r\n      setContent(modalContent);\r\n      setIsOpen(true);\r\n    },\r\n    [setContent, setIsOpen],\r\n  );\r\n\r\n  const handleDismiss = useCallback(() => {\r\n    setContent(undefined);\r\n    setIsOpen(false);\r\n  }, [setContent, setIsOpen]);\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        content,\r\n        isOpen,\r\n        onPresent: handlePresent,\r\n        onDismiss: handleDismiss,\r\n      }}\r\n    >\r\n      {children}\r\n      {isOpen && (\r\n        <StyledModalWrapper>\r\n          <StyledModalBackdrop onClick={handleDismiss} />\r\n          {React.isValidElement(content) &&\r\n            React.cloneElement(content, {\r\n              onDismiss: handleDismiss,\r\n            })}\r\n        </StyledModalWrapper>\r\n      )}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nconst StyledModalWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst StyledModalBackdrop = styled.div`\r\n  background-color: #00000088;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default Modals;\r\n","import React from 'react';\r\nimport { ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\n\r\nconst WalletCard = ({ icon, onConnect, title }) => (\r\n  <ListItem button onClick={onConnect}>\r\n    <ListItemIcon>{icon}</ListItemIcon>\r\n    <ListItemText primary={title} />\r\n  </ListItem>\r\n);\r\n\r\nexport default WalletCard;\r\n","import React, { useEffect } from 'react';\r\nimport WalletCard from './WalletCard';\r\nimport { Modal, List } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport metamaskLogo from '../../assets/img/metamask-fox.svg';\r\nimport walletConnectLogo from '../../assets/img/wallet-connect.svg';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(4),\r\n    outline: 'none',\r\n  },\r\n}));\r\n\r\nconst WalletProviderModal = ({ open, handleClose }) => {\r\n  const classes = useStyles();\r\n  const { account, connect } = useWallet();\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      handleClose();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"connect a wallet\"\r\n      aria-describedby=\"connect your crypto wallet\"\r\n      open={open}\r\n      style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n      onClose={handleClose}\r\n    >\r\n      <div className={classes.paper}>\r\n        <h2>Connect Wallet</h2>\r\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n          <WalletCard\r\n            icon={<img src={metamaskLogo} alt=\"Metamask logo\" style={{ height: 32 }} />}\r\n            onConnect={() => {\r\n              connect('injected');\r\n            }}\r\n            title=\"Metamask\"\r\n          />\r\n          <WalletCard\r\n            icon={<img src={walletConnectLogo} alt=\"Wallet Connect logo\" style={{ height: 24 }} />}\r\n            onConnect={() => {\r\n              connect('walletconnect');\r\n            }}\r\n            title=\"WalletConnect\"\r\n          />\r\n        </List>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WalletProviderModal;\r\n","import WalletProviderModal from './WalletProviderModal';\r\n\r\nexport default WalletProviderModal;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport useTokenBalance from '../../hooks/useTokenBalance';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\n\r\nimport Label from '../Label';\r\nimport Modal, { ModalProps } from '../Modal';\r\nimport ModalTitle from '../ModalTitle';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport TokenSymbol from '../TokenSymbol';\r\n\r\nconst AccountModal: React.FC<ModalProps> = ({ onDismiss }) => {\r\n  const tombFinance = useTombFinance();\r\n\r\n  const tombBalance = useTokenBalance(tombFinance.DANTE);\r\n  const displayTombBalance = useMemo(() => getDisplayBalance(tombBalance), [tombBalance]);\r\n\r\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\r\n  const displayTshareBalance = useMemo(() => getDisplayBalance(tshareBalance), [tshareBalance]);\r\n\r\n  const tbondBalance = useTokenBalance(tombFinance.TBOND);\r\n  const displayTbondBalance = useMemo(() => getDisplayBalance(tbondBalance), [tbondBalance]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text=\"My Wallet\" />\r\n\r\n      <Balances>\r\n        <StyledBalanceWrapper>\r\n          <TokenSymbol symbol=\"DANTE\" />\r\n          <StyledBalance>\r\n            <StyledValue>{displayTombBalance}</StyledValue>\r\n            <Label text=\"DANTE Available\" />\r\n          </StyledBalance>\r\n        </StyledBalanceWrapper>\r\n\r\n        <StyledBalanceWrapper>\r\n          <TokenSymbol symbol=\"GRAIL\" />\r\n          <StyledBalance>\r\n            <StyledValue>{displayTshareBalance}</StyledValue>\r\n            <Label text=\"GRAIL Available\" />\r\n          </StyledBalance>\r\n        </StyledBalanceWrapper>\r\n\r\n        <StyledBalanceWrapper>\r\n          <TokenSymbol symbol=\"DBOND\" />\r\n          <StyledBalance>\r\n            <StyledValue>{displayTbondBalance}</StyledValue>\r\n            <Label text=\"DBOND Available\" />\r\n          </StyledBalance>\r\n        </StyledBalanceWrapper>\r\n      </Balances>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  //color: ${(props) => props.theme.color.grey[300]};\r\n  font-size: 30px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst StyledBalance = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Balances = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  margin-bottom: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledBalanceWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nexport default AccountModal;\r\n","import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { useWallet } from 'use-wallet';\r\nimport useModal from '../../hooks/useModal';\r\nimport WalletProviderModal from '../WalletProviderModal';\r\nimport AccountModal from './AccountModal';\r\n\r\ninterface AccountButtonProps {\r\n  text?: string;\r\n}\r\n\r\nconst AccountButton: React.FC<AccountButtonProps> = ({ text }) => {\r\n  const { account } = useWallet();\r\n  const [onPresentAccountModal] = useModal(<AccountModal />);\r\n\r\n  const [isWalletProviderOpen, setWalletProviderOpen] = useState(false);\r\n\r\n  const handleWalletProviderOpen = () => {\r\n    setWalletProviderOpen(true);\r\n  };\r\n\r\n  const handleWalletProviderClose = () => {\r\n    setWalletProviderOpen(false);\r\n  };\r\n\r\n  const buttonText = text ? text : 'Unlock';\r\n\r\n  return (\r\n    <div>\r\n      {!account ? (\r\n        <Button onClick={handleWalletProviderOpen} color=\"primary\" variant=\"contained\">\r\n          {buttonText}\r\n        </Button>\r\n      ) : (\r\n        <Button variant=\"contained\" onClick={onPresentAccountModal}>\r\n          My Wallet\r\n        </Button>\r\n      )}\r\n\r\n      <WalletProviderModal open={isWalletProviderOpen} handleClose={handleWalletProviderClose} />\r\n      {/* <AccountModal open={isAccountModalOpen} handleClose={handleAccountModalClose}/> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Card: React.FC = ({ children }) => <StyledCard>{children}</StyledCard>;\r\n\r\nconst StyledCard = styled.div`\r\n  background-color: rgba(255, 255, 255, 0.9); //${(props) => props.theme.color.grey[800]};\r\n  color: #2c2560 !important;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport default Card;\r\n","import React, { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\n\r\ninterface ContainerProps {\r\n  children?: React.ReactNode;\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Container: React.FC<ContainerProps> = ({ children, size = 'md' }) => {\r\n  const { siteWidth } = useContext<{ siteWidth: number }>(ThemeContext);\r\n  let width: number;\r\n  switch (size) {\r\n    case 'sm':\r\n      width = siteWidth / 2;\r\n      break;\r\n    case 'md':\r\n      width = (siteWidth * 2) / 3;\r\n      break;\r\n    case 'lg':\r\n    default:\r\n      width = siteWidth;\r\n  }\r\n  return <StyledContainer width={width}>{children}</StyledContainer>;\r\n};\r\n\r\ninterface StyledContainerProps {\r\n  width: number;\r\n}\r\n\r\nconst StyledContainer = styled.div<StyledContainerProps>`\r\n  box-sizing: border-box;\r\n  margin: 0 auto;\r\n  max-width: ${(props) => props.width}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Card from '../Card';\r\nimport CardContent from '../CardContent';\r\nimport Container from '../Container';\r\n\r\nexport interface ModalProps {\r\n  onDismiss?: () => void;\r\n}\r\n\r\nconst Modal: React.FC = ({ children }) => {\r\n  return (\r\n    <Container size=\"sm\">\r\n      <StyledModal>\r\n        <Card>\r\n          <CardContent>{children}</CardContent>\r\n        </Card>\r\n      </StyledModal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst StyledModal = styled.div`\r\n  border-radius: 12px;\r\n  position: relative;\r\n`;\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalTitleProps {\r\n  text?: string;\r\n}\r\n\r\nconst ModalTitle: React.FC<ModalTitleProps> = ({ text }) => <StyledModalTitle>{text}</StyledModalTitle>;\r\n\r\nconst StyledModalTitle = styled.div`\r\n  align-items: center;\r\n  //color: ${(props) => props.theme.color.grey[300]};\r\n  display: flex;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  height: ${(props) => props.theme.topBarSize}px;\r\n  justify-content: center;\r\n  margin-top: ${(props) => -props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ModalTitle;\r\n","import { useCallback, useContext } from 'react';\r\n\r\nimport { Context } from '../contexts/Modals';\r\n\r\nconst useModal = (modal: React.ReactNode) => {\r\n  const { onDismiss, onPresent } = useContext(Context);\r\n\r\n  const handlePresent = useCallback(() => {\r\n    onPresent(modal);\r\n  }, [modal, onPresent]);\r\n\r\n  return [handlePresent, onDismiss];\r\n};\r\n\r\nexport default useModal;\r\n","import { useEffect } from 'react';\r\n// import { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\r\nimport { useWallet } from 'use-wallet';\r\n\r\nconst useEagerConnect = () => {\r\n  // const { login } = useAuth()\r\n  const { account, connect, connector } = useWallet();\r\n\r\n  if (account) {\r\n    window.localStorage.setItem('connectorId', connector);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const connectorId = window.localStorage.getItem('connectorId');\r\n\r\n    if (connectorId && !account) {\r\n      connect(connectorId);\r\n    }\r\n  }, [connect, account]);\r\n};\r\n\r\nexport default useEagerConnect;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Grid, Typography, Link } from '@material-ui/core';\r\nimport TwitterImage from '../../assets/img/twitter.svg';\r\nimport TelegramImage from '../../assets/img/telegram.svg';\r\nimport DiscordImage from '../../assets/img/discord.svg';\r\nimport YoutubeImage from '../../assets/img/youtube.svg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  footer: {\r\n    position: 'absolute',\r\n    bottom: '0',\r\n    paddingTop: '15px',\r\n    paddingBottom: '15px',\r\n    width: '100%',\r\n    color: 'white',\r\n    backgroundColor: '#121212',\r\n    textAlign: 'center',\r\n    height: '1.3rem',\r\n    [theme.breakpoints.down('xs')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  link: {\r\n    width: '24px',\r\n    height: '24px',\r\n    display: 'inline',\r\n    marginLeft: '20px',\r\n  },\r\n\r\n  img: {\r\n    width: '24px',\r\n    height: '24px',\r\n  },\r\n}));\r\n\r\nconst Footer = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <footer className={classes.footer}>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"left\">\r\n              {'Copyright © '}\r\n              <Link color=\"inherit\" href=\"/\">\r\n                Dante Finance\r\n              </Link>{' '}\r\n              {new Date().getFullYear()}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6} style={{ textAlign: 'right' }}>\r\n            <a\r\n              href=\"https://twitter.com/tombfinance\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n              className={classes.link}\r\n            >\r\n              <img alt=\"twitter\" src={TwitterImage} className={classes.img} />\r\n            </a>\r\n            <a href=\"https://t.me/tombfinance\" rel=\"noopener noreferrer\" target=\"_blank\" className={classes.link}>\r\n              <img alt=\"telegram\" src={TelegramImage} className={classes.img} />\r\n            </a>\r\n            <a\r\n              href=\"https://www.youtube.com/channel/UCGf87DxPzLXwPrfYpXIkaLQ\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n              className={classes.link}\r\n            >\r\n              <img alt=\"youtube\" src={YoutubeImage} className={classes.img} />\r\n            </a>\r\n            <a href=\"http://discord.DANTE.finance/\" rel=\"noopener noreferrer\" target=\"_blank\" className={classes.link}>\r\n              <img alt=\"discord\" src={DiscordImage} className={classes.img} />\r\n            </a>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import ListItemLink from './ListItemLink';\r\n\r\nexport default ListItemLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ListItem, ListItemText } from '@material-ui/core';\r\n\r\nconst ListItemLink = ({ primary, to }) => {\r\n  const CustomLink = React.useMemo(\r\n    () => React.forwardRef((linkProps, ref) => <Link ref={ref} to={to} {...linkProps} />),\r\n    [to],\r\n  );\r\n\r\n  return (\r\n    <li>\r\n      <ListItem button component={CustomLink}>\r\n        <ListItemText primary={primary} />\r\n      </ListItem>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ListItemLink;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  AppBar,\r\n  Box,\r\n  Drawer,\r\n  IconButton,\r\n  Toolbar,\r\n  Typography,\r\n  useMediaQuery,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n} from '@material-ui/core';\r\n\r\nimport ListItemLink from '../ListItemLink';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AccountButton from './AccountButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  '@global': {\r\n    ul: {\r\n      margin: 0,\r\n      padding: 0,\r\n      listStyle: 'none',\r\n    },\r\n  },\r\n  appBar: {\r\n    color: '#FFF',\r\n    'background-color': 'rgba(104, 76, 172, 0.9)',\r\n    // borderBottom: `1px solid ${theme.palette.divider}`,\r\n    padding: '10px',\r\n    marginBottom: '3rem',\r\n  },\r\n  drawer: {\r\n    width: 240,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: 240,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  toolbar: {\r\n    flexWrap: 'wrap',\r\n  },\r\n  toolbarTitle: {\r\n    fontFamily: 'Augusta',\r\n    fontSize: '30px',\r\n    flexGrow: 1,\r\n  },\r\n  link: {\r\n    textTransform: 'uppercase',\r\n    color: '#FFF',\r\n    fontSize: '20px',\r\n    margin: theme.spacing(1, 2),\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n  brandLink: {\r\n    textDecoration: 'none',\r\n    color: '#FFF',\r\n    '&:hover': {\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Nav = () => {\r\n  const matches = useMediaQuery('(min-width:900px)');\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"sticky\" elevation={0} className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n        {matches ? (\r\n          <>\r\n            <Typography variant=\"h2\" color=\"inherit\" noWrap className={classes.toolbarTitle}>\r\n              <Link to=\"/\" color=\"inherit\" className={classes.brandLink}>Dante Finance</Link>\r\n            </Typography>\r\n            <Box mr={5}>\r\n              <Link color=\"textPrimary\" to=\"/cemetery\" className={classes.link}>Purgatory</Link>\r\n              <Link color=\"textPrimary\" to=\"/masonry\" className={classes.link}>Eden</Link>\r\n              <Link color=\"textPrimary\" to=\"/pit\" className={classes.link}>Inferno</Link>\r\n              <Link color=\"textPrimary\" to=\"/regulations\" className={classes.link}>Regulations</Link>\r\n              <a href=\"https://docs.DANTE.finance\" className={classes.link}>Docs</a>\r\n            </Box>\r\n            <AccountButton text=\"Connect\" />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              edge=\"start\"\r\n              className={clsx(open && classes.hide)}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Tomb Finance\r\n            </Typography>\r\n\r\n            <Drawer\r\n              className={classes.drawer}\r\n              onEscapeKeyDown={handleDrawerClose}\r\n              onBackdropClick={handleDrawerClose}\r\n              variant=\"temporary\"\r\n              anchor=\"left\"\r\n              open={open}\r\n              classes={{\r\n                paper: classes.drawerPaper,\r\n              }}\r\n            >\r\n              <div>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                  {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n                </IconButton>\r\n              </div>\r\n              <Divider />\r\n              <List>\r\n                <ListItemLink primary=\"Home\" to=\"/\" />\r\n                <ListItemLink primary=\"Cemetery\" to=\"/cemetery\" />\r\n                <ListItemLink primary=\"Masonry\" to=\"/masonry\" />\r\n                <ListItemLink primary=\"Pit\" to=\"/pit\" />\r\n                <ListItemLink primary=\"Regulations\" to=\"/regulations\" />\r\n                <ListItem button component=\"a\" href=\"https://docs.DANTE.finance\">\r\n                  <ListItemText>Docs</ListItemText>\r\n                </ListItem>\r\n                <ListItem style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                  <AccountButton text=\"Connect\" />\r\n                </ListItem>\r\n              </List>\r\n            </Drawer>\r\n          </>\r\n        )}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import Nav from './Nav';\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport useEagerConnect from '../../hooks/useEagerConnect';\r\n\r\nimport Footer from '../Footer';\r\nimport Nav from '../Nav';\r\n\r\nconst Page: React.FC = ({ children }) => {\r\n  useEagerConnect();\r\n  return (\r\n    <div style={{ position: 'relative', minHeight: '100vh' }}>\r\n      <Nav />\r\n      <Container maxWidth=\"lg\" style={{ paddingBottom: '5rem' }}>\r\n        {children}\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { createContext } from 'react';\r\nimport { Bank } from '../../tomb-finance';\r\n\r\nexport interface BanksContext {\r\n  banks: Bank[];\r\n}\r\n\r\nconst context = createContext<BanksContext>({\r\n  banks: [],\r\n});\r\n\r\nexport default context;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport Context from './context';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport { Bank } from '../../tomb-finance';\r\nimport config, { bankDefinitions } from '../../config';\r\n\r\nconst Banks: React.FC = ({ children }) => {\r\n  const [banks, setBanks] = useState<Bank[]>([]);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchPools = useCallback(async () => {\r\n    const banks: Bank[] = [];\r\n\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      if (bankInfo.finished) {\r\n        if (!tombFinance.isUnlocked) continue;\r\n\r\n        // only show pools staked by user\r\n        const balance = await tombFinance.stakedBalanceOnBank(\r\n          bankInfo.contract,\r\n          bankInfo.poolId,\r\n          tombFinance.myAccount,\r\n        );\r\n        if (balance.lte(0)) {\r\n          continue;\r\n        }\r\n      }\r\n      banks.push({\r\n        ...bankInfo,\r\n        address: config.deployments[bankInfo.contract].address,\r\n        depositToken: tombFinance.externalTokens[bankInfo.depositTokenName],\r\n        earnToken: bankInfo.earnTokenName === 'DANTE' ? tombFinance.DANTE : tombFinance.TSHARE,\r\n      });\r\n    }\r\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\r\n    setBanks(banks);\r\n  }, [tombFinance, setBanks]);\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\r\n    }\r\n  }, [isUnlocked, tombFinance, fetchPools]);\r\n\r\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default Banks;\r\n","import { BigNumber } from 'ethers';\r\n\r\nexport const getDisplayBalance = (\r\n  balance: BigNumber,\r\n  decimals = 18,\r\n  fractionDigits = 4,\r\n  isTruncated: boolean = false,\r\n) => {\r\n  if (decimals === 0) {\r\n    fractionDigits = 0;\r\n  }\r\n  const number = getBalance(balance, decimals - fractionDigits);\r\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\r\n  if (ret.length > 12 && isTruncated) {\r\n    return ret.slice(0, 12) + '...';\r\n  }\r\n  return ret;\r\n};\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\r\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\r\n};\r\n\r\nexport function getBalance(balance: BigNumber, decimals = 18): number {\r\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/metamask-fox.c06f3a3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/dante.14e0049c.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CardContent: React.FC = ({ children }) => <StyledCardContent>{children}</StyledCardContent>;\r\n\r\nconst StyledCardContent = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default CardContent;\r\n","module.exports = __webpack_public_path__ + \"static/media/twitter.08d2ade8.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.28146bd8.svg\";","module.exports = __webpack_public_path__ + \"static/media/discord.5f33a495.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.503d2e22.svg\";","module.exports = __webpack_public_path__ + \"static/media/wallet-connect.d1f73612.svg\";","module.exports = __webpack_public_path__ + \"static/media/crypto_tomb_cash.f2b44ef4.svg\";","module.exports = __webpack_public_path__ + \"static/media/crypto_tomb_share.bf1a6c52.svg\";","module.exports = __webpack_public_path__ + \"static/media/crypto_tomb_cash.f2b44ef4.4d4f8ca6.png\";","module.exports = __webpack_public_path__ + \"static/media/crypto_tomb_share.bf1a6c52.14510c1a.png\";","// import { ChainId } from '@pancakeswap-libs/sdk';\r\n//import { ChainId } from '@spookyswap/sdk';\r\nimport { ChainId } from '@ac32/spookyswap-sdk';\r\nimport { Configuration } from './tomb-finance/config';\r\nimport { BankInfo } from './tomb-finance';\r\n\r\nconst configurations: { [env: string]: Configuration } = {\r\n  development: {\r\n    chainId: 4002,\r\n    networkName: 'Fantom Opera Testnet',\r\n    ftmscanUrl: 'https://testnet.ftmscan.com',\r\n    defaultProvider: 'https://xapi.testnet.fantom.network/lachesis',\r\n    deployments: require('./tomb-finance/deployments/deployments.testing.json'),\r\n    externalTokens: {\r\n      WFTM: ['0x7220838A1434a3DD4E434E6984F46A58B483Df69', 18],\r\n      USDC: ['0x592B22834f4CB9F756D629E56Cfaf79E6dBe1Ee8', 18],\r\n      TOMB: ['0x04F62d3Fe06802069e814880d6E1Dcd186183825', 18],\r\n      'USDC-FTM-LP': ['0x1537435f15d47f5f6c76aa9a3fb94da2e5cab8e6', 18],\r\n      'DANTE-TOMB-LP': ['0x9ac3796cfe6b12d6665a32c3800492d6761fe28f', 18],\r\n      'GRAIL-FTM-LP': ['0x78c7fe92dd16392232a45dd3c5a930f2bd580418', 18],\r\n      'TOMB-FTM-LP': ['0xfda64eedbd9f0ecd8e8932bd6724c529417b6851', 18],\r\n      'DANTE-GRAIL-LP': ['0x521bbc668698999ac18d631002665c66daabef5a', 18]\r\n    },\r\n    baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n  production: {\r\n    chainId: 4002,\r\n    networkName: 'Fantom Opera Testnet',\r\n    ftmscanUrl: 'https://testnet.ftmscan.com',\r\n    defaultProvider: 'https://xapi.testnet.fantom.network/lachesis',\r\n    deployments: require('./tomb-finance/deployments/deployments.testing.json'),\r\n    externalTokens: {\r\n      WFTM: ['0x7220838A1434a3DD4E434E6984F46A58B483Df69', 18],\r\n      USDC: ['0x592B22834f4CB9F756D629E56Cfaf79E6dBe1Ee8', 18],\r\n      TOMB: ['0x04F62d3Fe06802069e814880d6E1Dcd186183825', 18],\r\n      'USDC-FTM-LP': ['0x1537435f15d47f5f6c76aa9a3fb94da2e5cab8e6', 18],\r\n      'DANTE-TOMB-LP': ['0x9ac3796cfe6b12d6665a32c3800492d6761fe28f', 18],\r\n      'GRAIL-FTM-LP': ['0x78c7fe92dd16392232a45dd3c5a930f2bd580418', 18],\r\n      'TOMB-FTM-LP': ['0xfda64eedbd9f0ecd8e8932bd6724c529417b6851', 18],\r\n      'DANTE-GRAIL-LP': ['0x521bbc668698999ac18d631002665c66daabef5a', 18]\r\n    },\r\n    baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  }\r\n};\r\n\r\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\r\n  /*\r\n  Explanation:\r\n  identifier: unique ID of the card\r\n  name: description of the card\r\n  poolId: the poolId assigned in the contract\r\n  sectionInUI: way to distinguish in which of the pool groups it should be listed\r\n  contract: the contract name which will be loaded from the deployment.environmnet.json\r\n  depositTokenName : the name of the token to be deposited\r\n  earnTokenName: the rewarded token\r\n  finished: will disable the pool on the UI if set to true\r\n  sort: the order of the pool\r\n  */\r\n  WFTMDanteRewardPool: {\r\n    identifier: 'WFTMDanteRewardPool',\r\n    name: 'Earn DANTE by WFTM',\r\n    poolId: 0,\r\n    sectionInUI: 0,\r\n    contract: 'DanteRewardPool',\r\n    depositTokenName: 'WFTM',\r\n    earnTokenName: 'DANTE',\r\n    finished: false,\r\n    sort: 1,\r\n    closedForStaking: false,\r\n    fee: 0.8\r\n  },\r\n  USDCDanteRewardPool: {\r\n    identifier: 'USDCDanteRewardPool',\r\n    name: 'Earn DANTE by USDC',\r\n    poolId: 1,\r\n    sectionInUI: 0,\r\n    contract: 'DanteRewardPool',\r\n    depositTokenName: 'USDC',\r\n    earnTokenName: 'DANTE',\r\n    finished: false,\r\n    sort: 2,\r\n    closedForStaking: false,\r\n    fee: 0.8\r\n  },\r\n  TombDanteRewardPool: {\r\n    identifier: 'TombDanteRewardPool',\r\n    name: 'Earn DANTE by Tomb',\r\n    poolId: 2,\r\n    sectionInUI: 0,\r\n    contract: 'DanteRewardPool',\r\n    depositTokenName: 'TOMB',\r\n    earnTokenName: 'DANTE',\r\n    finished: false,\r\n    sort: 3,\r\n    closedForStaking: false,\r\n    fee: 0.8\r\n  },\r\n  DanteTombLPDanteRewardPool: {\r\n    identifier: 'DanteTombLPDanteRewardPool',\r\n    name: 'Earn DANTE by Dante-Tomb LP',\r\n    poolId: 3,\r\n    sectionInUI: 0,\r\n    contract: 'DanteRewardPool',\r\n    depositTokenName: 'DANTE-TOMB-LP',\r\n    earnTokenName: 'DANTE',\r\n    finished: false,\r\n    sort: 4,\r\n    closedForStaking: false,\r\n    fee: 0.8\r\n  },\r\n  DanteTombLPGrailRewardPool: {\r\n    identifier: 'DanteTombLPGrailRewardPool',\r\n    name: 'Earn GRAIL by DANTE-TOMB LP',\r\n    poolId: 0,\r\n    sectionInUI: 2,\r\n    contract: 'GrailRewardPool',\r\n    depositTokenName: 'DANTE-TOMB-LP',\r\n    earnTokenName: 'GRAIL',\r\n    finished: false,\r\n    sort: 1,\r\n    closedForStaking: false,\r\n    fee: 0\r\n  },\r\n  GrailWFTMLPGrailRewardPool: {\r\n    identifier: 'GrailWFTMLPGrailRewardPool',\r\n    name: 'Earn GRAIL by Grail-WFTM LP',\r\n    poolId: 1,\r\n    sectionInUI: 2,\r\n    contract: 'GrailRewardPool',\r\n    depositTokenName: 'GRAIL-FTM-LP',\r\n    earnTokenName: 'GRAIL',\r\n    finished: false,\r\n    sort: 2,\r\n    closedForStaking: false,\r\n    fee: 0\r\n  },\r\n  DanteGrailLPGrailRewardPool: {\r\n    identifier: 'DanteGrailLPGrailRewardPool',\r\n    name: 'Earn GRAIL by Dante-DANTE-GRAIL-LP LP',\r\n    poolId: 2,\r\n    sectionInUI: 2,\r\n    contract: 'GrailRewardPool',\r\n    depositTokenName: 'DANTE-GRAIL-LP',\r\n    earnTokenName: 'GRAIL',\r\n    finished: false,\r\n    sort: 3,\r\n    closedForStaking: false,\r\n    fee: 0\r\n  }\r\n};\r\n\r\nexport default configurations[process.env.NODE_ENV || 'development'];\r\n","module.exports = __webpack_public_path__ + \"static/media/crypto_tomb_bond.f3331ee8.svg\";","module.exports = __webpack_public_path__ + \"static/media/ftm_logo_blue.00e4ee28.svg\";","module.exports = __webpack_public_path__ + \"static/media/USDC.10a9273a.svg\";","module.exports = __webpack_public_path__ + \"static/media/grail.45e6a6aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/dbond.6b525b75.svg\";","module.exports = __webpack_public_path__ + \"static/media/dante_tomb.21889a21.svg\";","module.exports = __webpack_public_path__ + \"static/media/grail_ftm.7bd7d225.svg\";","module.exports = __webpack_public_path__ + \"static/media/dante_grail.3e581fb4.svg\";","module.exports = __webpack_public_path__ + \"static/media/regulations_bg.b9559c2c.png\";","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport type PopupContent = {\r\n  txn?: {\r\n    hash: string;\r\n    success: boolean;\r\n    summary?: string;\r\n  };\r\n  error?: {\r\n    message: string;\r\n    stack: string;\r\n  };\r\n};\r\n\r\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>('app/updateBlockNumber');\r\n\r\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\r\n\r\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\r\n\r\nexport const addPopup = createAction<{\r\n  key?: string;\r\n  removeAfterMs?: number | null;\r\n  content: PopupContent;\r\n}>('app/addPopup');\r\n\r\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\r\n","import { useEffect, useState } from 'react';\r\nimport config from './../config';\r\n\r\nconst usePromptNetwork = () => {\r\n  const [networkPrompt, setNetworkPrompt] = useState(false);\r\n  const { ethereum } = window as any;\r\n\r\n  /**\r\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\r\n   * And https://docs.metamask.io/guide/ethereum-provider.html\r\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\r\n   * @returns\r\n   */\r\n  const connectToNetwork = async (provider: any) => {\r\n    await provider.request({\r\n      method: 'wallet_addEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: `0x${config.chainId.toString(16)}`,\r\n          chainName: config.networkName,\r\n          nativeCurrency: {\r\n            name: 'FTM',\r\n            symbol: 'ftm',\r\n            decimals: 18,\r\n          },\r\n          rpcUrls: [config.defaultProvider],\r\n          blockExplorerUrls: [config.ftmscanUrl],\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    if (!networkPrompt) {\r\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\r\n        connectToNetwork(ethereum);\r\n        setNetworkPrompt(true);\r\n      }\r\n    }\r\n  }, [networkPrompt, ethereum]);\r\n};\r\n\r\nexport default usePromptNetwork;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = { hash, approval, summary, from, addedTime: now() };\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    }),\r\n);\r\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\r\nimport {\r\n  addPopup,\r\n  PopupContent,\r\n  removePopup,\r\n  toggleWalletModal,\r\n  toggleSettingsMenu,\r\n  updateBlockNumber,\r\n} from './actions';\r\n\r\ntype PopupList = Array<{\r\n  key: string;\r\n  show: boolean;\r\n  content: PopupContent;\r\n  removeAfterMs: number | null;\r\n}>;\r\n\r\nexport interface ApplicationState {\r\n  blockNumber: { [chainId: number]: number };\r\n  popupList: PopupList;\r\n  walletModalOpen: boolean;\r\n  settingsMenuOpen: boolean;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  walletModalOpen: false,\r\n  settingsMenuOpen: false,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const { chainId, blockNumber } = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== 'number') {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\r\n      }\r\n    })\r\n    .addCase(toggleWalletModal, (state) => {\r\n      state.walletModalOpen = !state.walletModalOpen;\r\n    })\r\n    .addCase(toggleSettingsMenu, (state) => {\r\n      state.settingsMenuOpen = !state.settingsMenuOpen;\r\n    })\r\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\r\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\r\n        {\r\n          key: key || nanoid(),\r\n          show: true,\r\n          content,\r\n          removeAfterMs,\r\n        },\r\n      ]);\r\n    })\r\n    .addCase(removePopup, (state, { payload: { key } }) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    }),\r\n);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { save, load } from 'redux-localstorage-simple';\r\nimport transactions from './transactions/reducer';\r\nimport application from './application/reducer';\r\n\r\nconst PERSISTED_KEYS: string[] = ['transactions'];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    transactions,\r\n  },\r\n  //middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","export const white = '#FFF';\r\nexport const black = '#000';\r\n\r\nexport const green = {\r\n  500: '#00D110',\r\n};\r\n\r\nexport const purple = {\r\n  200: '#bd7cfe',\r\n  400: '#ab47bc',\r\n  700: '#7b1fa2',\r\n};\r\n\r\nexport const red = {\r\n  100: '#C1C1FF',\r\n  200: '#7575FF',\r\n  500: '#9090FF',\r\n};\r\n\r\nexport const grey = {\r\n  100: '#f5f5f5',\r\n  200: '#eeeeee',\r\n  300: '#e0e0e0',\r\n  400: '#bdbdbd',\r\n  500: '#9e9e9e',\r\n  600: '#757575',\r\n  700: '#616161',\r\n  800: '#424242',\r\n  900: '#212121',\r\n};\r\n\r\nexport const bg = '#000000';\r\n\r\nexport const teal = {\r\n  200: '#64ffda',\r\n};\r\n","import { black, purple, teal, grey, red, white } from './colors';\r\n\r\nconst theme = {\r\n  borderRadius: 12,\r\n  color: {\r\n    black,\r\n    grey,\r\n    purple,\r\n    primary: {\r\n      light: red[200],\r\n      main: red[500],\r\n    },\r\n    secondary: {\r\n      main: teal[200],\r\n    },\r\n    white,\r\n    teal,\r\n  },\r\n  siteWidth: 1200,\r\n  spacing: {\r\n    1: 4,\r\n    2: 8,\r\n    3: 16,\r\n    4: 24,\r\n    5: 32,\r\n    6: 48,\r\n    7: 64,\r\n  },\r\n  topBarSize: 72,\r\n};\r\n\r\nexport default theme;\r\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst newTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    text: {\r\n      primary: '#FFF',\r\n    },\r\n    background: {\r\n      default: '#121212',\r\n      paper: 'rgba(255, 255, 255, 0.9)',\r\n    },\r\n    primary: {\r\n      light: '#757ce8',\r\n      main: '#571eb1',\r\n      dark: '#2c2560',\r\n      contrastText: '#000',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#f44336',\r\n      dark: '#ba000d',\r\n      contrastText: '#000',\r\n    },\r\n    action: {\r\n      disabledBackground: '#CDCDCD',\r\n      active: '#000',\r\n      hover: '#000',\r\n    },\r\n  },\r\n  typography: {\r\n    color: '#2c2560',\r\n    fontFamily: ['\"Poppins\"', 'sans-serif'].join(','),\r\n  },\r\n});\r\n\r\nexport default newTheme;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\r\n\r\nfunction isWindowVisible() {\r\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible(): boolean {\r\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\r\n  const listener = useCallback(() => {\r\n    setFocused(isWindowVisible());\r\n  }, [setFocused]);\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\r\n\r\n    document.addEventListener('visibilitychange', listener);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', listener);\r\n    };\r\n  }, [listener]);\r\n\r\n  return focused;\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\r\nimport { updateBlockNumber } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport default function Updater(): null {\r\n  const { ethereum, chainId } = useWallet();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const windowVisible = useIsWindowVisible();\r\n\r\n  const [state, setState] = useState<{\r\n    chainId: number | undefined;\r\n    blockNumber: number | null;\r\n  }>({\r\n    chainId,\r\n    blockNumber: null,\r\n  });\r\n\r\n  const blockNumberCallback = useCallback(\r\n    (blockNumber: number) => {\r\n      setState((state) => {\r\n        if (chainId === state.chainId) {\r\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\r\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\r\n        }\r\n        return state;\r\n      });\r\n    },\r\n    [chainId, setState],\r\n  );\r\n\r\n  // attach/detach listeners\r\n  // @ts-ignore\r\n  useEffect(() => {\r\n    if (!ethereum || !chainId || !windowVisible) return undefined;\r\n    setState({ chainId, blockNumber: null });\r\n\r\n    const provider = getDefaultProvider();\r\n    provider\r\n      .getBlockNumber()\r\n      .then(blockNumberCallback)\r\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\r\n\r\n    provider.on('block', blockNumberCallback);\r\n    return () => provider.removeListener('block', blockNumberCallback);\r\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\r\n\r\n  const debouncedState = useDebounce(state, 100);\r\n\r\n  useEffect(() => {\r\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\r\n    dispatch(\r\n      updateBlockNumber({\r\n        chainId: debouncedState.chainId,\r\n        blockNumber: debouncedState.blockNumber,\r\n      }),\r\n    );\r\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\r\n\r\n  return null;\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { checkedTransaction, finalizeTransaction } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\r\n): boolean {\r\n  if (tx.receipt) return false;\r\n  if (!tx.lastCheckedBlockNumber) return true;\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\r\n  if (blocksSinceCheck < 1) return false;\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9;\r\n  } else if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2;\r\n  } else {\r\n    // otherwise every block\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { chainId, ethereum } = useWallet();\r\n\r\n  const lastBlockNumber = useBlockNumber();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  const transactions = chainId ? state[chainId] ?? {} : {};\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup();\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !ethereum || !lastBlockNumber) {\r\n      return;\r\n    }\r\n\r\n    const provider = getDefaultProvider();\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        provider\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              );\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary,\r\n                  },\r\n                },\r\n                hash,\r\n              );\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error);\r\n          });\r\n      });\r\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ApplicationUpdater from './application/updater';\r\nimport TransactionUpdater from './transactions/updater';\r\n\r\nconst Updaters = () => (\r\n  <>\r\n    <ApplicationUpdater />\r\n    <TransactionUpdater />\r\n  </>\r\n);\r\n\r\nexport default Updaters;\r\n","import Loader from './Loader';\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n      }}\r\n    >\r\n      <Typography>Loading</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useContext } from 'react';\r\nimport { AlertCircle, CheckCircle } from 'react-feather';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { useWallet } from 'use-wallet';\r\nimport config from '../../config';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function TransactionPopup({\r\n  hash,\r\n  success,\r\n  summary,\r\n}: {\r\n  hash: string;\r\n  success?: boolean;\r\n  summary?: string;\r\n}) {\r\n  const { chainId } = useWallet();\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\r\n        {chainId && (\r\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\r\n            View on Ftmscan\r\n          </StyledLink>\r\n        )}\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport { AlertCircle } from 'react-feather';\r\nimport styled from 'styled-components';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function ErrorPopup({ message, stack }: { message: string; stack: string }) {\r\n  const copyErrorDetails = useCallback(async () => {\r\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\r\n  }, [message, stack]);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        <AlertCircle color=\"#FF6871\" size={24} />\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{message}</StyledPopupDesc>\r\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\r\n          Copy error details\r\n        </StyledLink>\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback, useContext, useEffect } from 'react';\r\nimport { X } from 'react-feather';\r\nimport { useSpring } from 'react-spring/web';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { animated } from 'react-spring';\r\nimport { PopupContent } from '../../state/application/actions';\r\nimport { useRemovePopup } from '../../state/application/hooks';\r\nimport TransactionPopup from './TransactionPopup';\r\nimport ErrorPopup from './ErrorPopup';\r\n\r\nexport const StyledClose = styled(X)`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nexport const Popup = styled.div`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 1em;\r\n  background-color: ${({ theme }) => theme.color.grey[700]};\r\n  position: relative;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  padding-right: 35px;\r\n  overflow: hidden;\r\n\r\n  @media (max-width: 768px) {\r\n    min-width: 290px;\r\n  }\r\n`;\r\nconst Fader = styled.div`\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ${({ theme }) => theme.color.grey[400]};\r\n`;\r\n\r\nconst AnimatedFader = animated(Fader);\r\n\r\nexport default function PopupItem({\r\n  removeAfterMs,\r\n  content,\r\n  popKey,\r\n}: {\r\n  removeAfterMs: number | null;\r\n  content: PopupContent;\r\n  popKey: string;\r\n}) {\r\n  const removePopup = useRemovePopup();\r\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\r\n  useEffect(() => {\r\n    if (removeAfterMs === null) return undefined;\r\n\r\n    const timeout = setTimeout(() => {\r\n      removeThisPopup();\r\n    }, removeAfterMs);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [removeAfterMs, removeThisPopup]);\r\n\r\n  const theme = useContext(ThemeContext);\r\n\r\n  let popupContent;\r\n  if ('txn' in content) {\r\n    const {\r\n      txn: { hash, success, summary },\r\n    } = content;\r\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\r\n  }\r\n  if ('error' in content) {\r\n    const {\r\n      error: { message, stack },\r\n    } = content;\r\n    popupContent = <ErrorPopup message={message} stack={stack} />;\r\n  }\r\n\r\n  const faderStyle = useSpring({\r\n    from: { width: '100%' },\r\n    to: { width: '0%' },\r\n    config: { duration: removeAfterMs ?? undefined },\r\n  });\r\n\r\n  return (\r\n    <Popup>\r\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\r\n      {popupContent}\r\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\r\n    </Popup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useActivePopups } from '../../state/application/hooks';\r\nimport PopupItem from './PopupItem';\r\n\r\nconst MobilePopupWrapper = styled.div<{ height: string | number }>`\r\n  position: relative;\r\n  max-width: 100%;\r\n  height: ${({ height }) => height};\r\n  margin: ${({ height }) => (height ? '0 auto;' : 0)};\r\n  margin-bottom: ${({ height }) => (height ? '20px' : 0)}};\r\n\r\n  display: none;\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n  };\r\n`;\r\n\r\nconst MobilePopupInner = styled.div`\r\n  height: 99%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-overflow-scrolling: touch;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst FixedPopupColumn = styled.div`\r\n  position: fixed;\r\n  top: 64px;\r\n  margin-right: 24px;\r\n  right: 3rem;\r\n  max-width: 355px !important;\r\n  width: 100%;\r\n  z-index: 2;\r\n\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  } ;\r\n`;\r\n\r\nexport default function Popups() {\r\n  // get all popups\r\n  const activePopups = useActivePopups();\r\n\r\n  return (\r\n    <>\r\n      <FixedPopupColumn>\r\n        {activePopups.map((item) => (\r\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n        ))}\r\n      </FixedPopupColumn>\r\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\r\n        <MobilePopupInner>\r\n          {activePopups // reverse so new items up front\r\n            .slice(0)\r\n            .reverse()\r\n            .map((item) => (\r\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n            ))}\r\n        </MobilePopupInner>\r\n      </MobilePopupWrapper>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\n\r\nimport Page from '../../components/Page';\r\nimport RegulationsImage from '../../assets/img/regulations_bg.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body, html {\r\n    background: url(${RegulationsImage}) no-repeat !important;\r\n    background-size: cover !important;\r\n  }\r\n`;\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    fontSize: 18,\r\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n    color: '#2c2560',\r\n    fontWeight: 'bolder',\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n    color: '#2c2560',\r\n  },\r\n}))(TableCell);\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: 'rgb(0,0,0)',\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst Regulations = () => {\r\n  const classes = useStyles();\r\n  const tombFinance = useTombFinance();\r\n  const [rows, setRows] = useState(null);\r\n  function createData(epoch, dao, dev, masonry) {\r\n    var sum = (Number(dao) + Number(dev) + Number(masonry)).toFixed(2);\r\n    return { epoch, dao, dev, masonry, sum };\r\n  }\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      const thisData = tombFinance.listenForRegulationsEvents();\r\n      thisData.then((elements) => {\r\n        setRows(\r\n          elements\r\n            .reverse()\r\n            .map((element) => createData(element.epoch, element.daoFund, element.devFund, element.masonryFund)),\r\n        );\r\n      });\r\n    }\r\n  }, [tombFinance]);\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n      <Typography color=\"textPrimary\" align=\"center\" variant=\"h3\" gutterBottom>\r\n        Graveyard regulations\r\n      </Typography>\r\n      <TableContainer>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"center\">Epoch</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Masonry funding</StyledTableCell>\r\n              <StyledTableCell align=\"center\">DAO funding</StyledTableCell>\r\n              <StyledTableCell align=\"center\">DEV funding</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Total</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Bonds Bought</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Bonds Redeemed</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows?.map((row, index) => (\r\n              <StyledTableRow\r\n                style={index % 2 ? { background: 'rgba(255,255,255,0.9)' } : { background: 'rgba(255,255,255,0.8)' }}\r\n                key={row.epoch}\r\n              >\r\n                <StyledTableCell style={{ color: '#2c2560' }} align=\"center\" component=\"th\" scope=\"row\">\r\n                  {row.epoch}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">{row.masonry}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">{row.dao}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">{row.dev}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">{row.sum}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">0</StyledTableCell>\r\n                <StyledTableCell align=\"center\">0</StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Regulations;\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Provider } from 'react-redux';\r\n//import { BrowserRouter as Router, HashRouter, Route, Switch } from 'react-router-dom';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport { ThemeProvider as TP } from '@material-ui/core/styles';\r\nimport { ThemeProvider as TP1 } from 'styled-components';\r\nimport { UseWalletProvider } from 'use-wallet';\r\nimport usePromptNetwork from './hooks/useNetworkPrompt';\r\nimport BanksProvider from './contexts/Banks';\r\nimport TombFinanceProvider from './contexts/TombFinanceProvider';\r\nimport ModalsProvider from './contexts/Modals';\r\nimport store from './state';\r\nimport theme from './theme';\r\nimport newTheme from './newTheme';\r\nimport config from './config';\r\nimport Updaters from './state/Updaters';\r\nimport Loader from './components/Loader';\r\nimport Popups from './components/Popups';\r\nimport Regulations from './views/Regulations/Regulations';\r\n\r\nconst Home = lazy(() => import('./views/Home'));\r\nconst Cemetery = lazy(() => import('./views/Cemetery'));\r\nconst Masonry = lazy(() => import('./views/Masonry'));\r\nconst Pit = lazy(() => import('./views/Pit'));\r\n\r\nconst NoMatch = () => (\r\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n    URL Not Found. <a href=\"/\">Go back home.</a>\r\n  </h3>\r\n);\r\n\r\nconst App: React.FC = () => {\r\n  // Clear localStorage for mobile users\r\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.0') {\r\n    localStorage.clear();\r\n    localStorage.setItem('connectorId', '');\r\n    localStorage.setItem('version_app', '1.0');\r\n  }\r\n\r\n  usePromptNetwork();\r\n\r\n  return (\r\n    <Providers>\r\n      <HashRouter>\r\n        <Suspense fallback={<Loader />}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/cemetery\">\r\n              <Cemetery />\r\n            </Route>\r\n            <Route path=\"/masonry\">\r\n              <Masonry />\r\n            </Route>\r\n            <Route path=\"/pit\">\r\n              <Pit />\r\n            </Route>\r\n            <Route path=\"/regulations\">\r\n              <Regulations />\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <NoMatch />\r\n            </Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </HashRouter>\r\n    </Providers>\r\n  );\r\n};\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <TP1 theme={theme}>\r\n      <TP theme={newTheme}>\r\n        <UseWalletProvider\r\n          chainId={config.chainId}\r\n          connectors={{\r\n            walletconnect: { rpcUrl: config.defaultProvider },\r\n          }}\r\n        >\r\n          <Provider store={store}>\r\n            <Updaters />\r\n            <TombFinanceProvider>\r\n              <ModalsProvider>\r\n                <BanksProvider>\r\n                  <>\r\n                    <Popups />\r\n                    {children}\r\n                  </>\r\n                </BanksProvider>\r\n              </ModalsProvider>\r\n            </TombFinanceProvider>\r\n          </Provider>\r\n        </UseWalletProvider>\r\n      </TP>\r\n    </TP1>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const TOMB_TICKER = 'TOMB';\r\nexport const TSHARE_TICKER = 'TSHARE';\r\nexport const TBOND_TICKER = 'TBOND';\r\nexport const FTM_TICKER = 'FTM';\r\nexport const WFTM_TICKER = 'WFTM';\r\nexport const SPOOKY_ROUTER_ADDR = '0xF491e7B69E4244ad4002BC14e878a34207E38c29';\r\nexport const ZAPPER_ROUTER_ADDR = '0x8bb1fe7a50082623b372d857b4d07911c786a3e9';\r\n","import { useContext } from 'react';\r\nimport { Context } from '../contexts/TombFinanceProvider';\r\n\r\nconst useTombFinance = () => {\r\n  const { tombFinance } = useContext(Context);\r\n  return tombFinance;\r\n};\r\n\r\nexport default useTombFinance;\r\n"],"sourceRoot":""}