{"version":3,"sources":["hooks/useHandleTransactionReceipt.ts","state/transactions/hooks.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/ModalActions/ModalActions.tsx","hooks/useAllowance.ts","components/UnlockWallet/UnlockWallet.tsx","hooks/useTombStats.ts","hooks/useApprove.ts","components/Spacer/Spacer.tsx","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx","assets/img/eden.png","hooks/masonry/useClaimRewardTimerMasonry.ts","hooks/masonry/useClaimRewardCheck.ts","views/Masonry/components/ProgressCountdown.tsx","hooks/useHarvestFromMasonry.ts","hooks/useEarningsOnMasonry.ts","views/Masonry/components/Harvest.tsx","hooks/masonry/useWithdrawCheck.ts","views/Masonry/components/DepositModal.tsx","views/Masonry/components/WithdrawModal.tsx","hooks/useStakedBalanceOnMasonry.ts","hooks/masonry/useUnstakeTimerMasonry.ts","hooks/useStakeToMasonry.ts","hooks/useWithdrawFromMasonry.ts","views/Masonry/components/Stake.tsx","hooks/useRedeemOnMasonry.ts","hooks/useCurrentEpoch.ts","hooks/useFetchMasonryAPR.ts","hooks/useCashPriceInEstimatedTWAP.ts","hooks/useTreasuryAllocationTimes.ts","hooks/useTotalStakedOnMasonry.ts","views/Masonry/Masonry.js"],"names":["useHandleTransactionReceipt","addTransaction","useTransactionAdder","addPopup","useAddPopup","useCallback","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","console","error","stack","useWallet","chainId","account","dispatch","useDispatch","response","approval","hash","Error","from","useAllTransactions","state","useSelector","transactions","useHasPendingApproval","tokenAddress","spender","allTransactions","useMemo","Object","keys","some","receipt","Date","getTime","addedTime","isTransactionRecent","StyledInputWrapper","styled","div","props","theme","color","grey","borderRadius","spacing","StyledInput","input","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","TokenInput","max","symbol","onSelectMax","toLocaleString","Button","size","variant","onClick","StyledModalActions","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useAllowance","token","pendingApproval","useState","allowance","setAllowance","fetchAllowance","a","useEffect","log","UnlockWallet","Box","style","position","top","left","transform","AccountButton","useTombStats","stat","setStat","tombFinance","useTombFinance","fetchCashPrice","getDanteStat","refreshInterval","setInterval","config","clearInterval","ApprovalState","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","useApprove","address","currentAllowance","approvalState","lt","PENDING","NOT_APPROVED","APPROVED","UNKNOWN","approve","Spacer","s","useContext","ThemeContext","useStakedTokenPriceInDollars","stakedTokenName","stakedToken","stakedTokenPriceInDollars","setStakedTokenPriceInDollars","isUnlocked","fetchBalance","getDepositTokenPriceInDollars","balance","refreshStakedTokenPriceInDollars","StyledIcon","Icon","AddIcon","themeColor","height","viewBox","width","d","fill","RemoveIcon","StyledButton","button","disabled","primary","main","undefined","StyledLink","Link","IconButton","to","module","exports","useClaimRewardTimerMasonry","time","setTime","getUserClaimRewardTime","useClaimRewardCheck","canClaimReward","setCanClaimReward","canUserClaimReward","canUserClaimRewardFromMasonry","checkButton","StyledCountdown","p","StyledProgressOuter","StyledProgress","progress","StyledCardContentInner","ProgressCountdown","base","deadline","hideBar","percentage","description","now","key","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","padStart","useHarvestFromMasonry","handleTransactionReceipt","onReward","harvestCashFromMasonry","useEarningsOnMasonry","setBalance","getEarningsOnMasonry","refreshBalance","StyledCardHeader","StyledCardActions","Harvest","tombStats","earnings","tokenPriceInDollars","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Card","backgroundColor","CardContent","TokenSymbol","fontSize","marginTop","eq","mt","Typography","textAlign","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserWithdraw","canUserUnstakeFromMasonry","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","text","WithdrawModal","useStakedBalanceOnMasonry","getStakedSharesOnMasonry","useUnstakeTimerMasonry","getUserUnstakeTime","useStakeToMasonry","onStake","amount","stakeShareToMasonry","useWithdrawFromMasonry","onWithdraw","withdrawShareFromMasonry","StyledActionSpacer","Stake","TSHARE","contracts","Masonry","approveStatus","tokenBalance","useTokenBalance","stakedBalance","toString","canWithdrawFromMasonry","useModal","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","useRedeemOnMasonry","onRedeem","alertDesc","exitFromMasonry","useCurrentEpoch","currentEpoch","setCurrentEpoch","fetchCurrentEpoch","getCurrentEpoch","useFetchMasonryAPR","apr","setApr","fetchMasonryPR","getMasonryAPR","useCashPriceInEstimatedTWAP","getTombStatInEstimatedTWAP","useTreasuryAllocationTimes","getTreasuryNextAllocationTime","useTotalStakedOnMasonry","totalStaked","setTotalStaked","fetchTotalStaked","getTotalStakedInMasonry","BackgroundImage","createGlobalStyle","MasonryImage","useStyles","makeStyles","gridItem","breakpoints","up","StyledBoardroom","StyledCardsWrapper","StyledCardWrapper","classes","cashStat","masonryAPR","scalingFactor","Page","display","padding","margin","Grid","container","justify","item","xs","md","lg","className","moment","toDate","align","Alert","severity"],"mappings":"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","file":"static/js/6.3abeb442.chunk.js","sourcesContent":["import { useCallback } from 'react';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { useTransactionAdder } from '../state/transactions/hooks';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, { summary }))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({ error: { message, stack: err.message || err.stack } });\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import { TransactionResponse } from '@ethersproject/providers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { addTransaction, clearAllTransactions } from './actions';\r\nimport { TransactionDetails } from './reducer';\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } },\r\n) => void {\r\n  const { chainId, account } = useWallet();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {},\r\n    ) => {\r\n      if (!account) return;\r\n      if (!chainId) return;\r\n\r\n      const { hash } = response;\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.');\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }));\r\n    },\r\n    [dispatch, chainId, account],\r\n  );\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useWallet();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  return chainId ? state[chainId] ?? {} : {};\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions();\r\n  if (!transactionHash || !transactions[transactionHash]) {\r\n    return false;\r\n  }\r\n  return !transactions[transactionHash].receipt;\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000;\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions();\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash];\r\n        if (!tx) return false;\r\n        if (tx.receipt) {\r\n          return false;\r\n        } else {\r\n          const approval = tx.approval;\r\n          if (!approval) return false;\r\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\r\n        }\r\n      }),\r\n    [allTransactions, spender, tokenAddress],\r\n  );\r\n}\r\n\r\nexport function useClearAllTransactions(): { clearAllTransactions: () => void } {\r\n  const { chainId } = useWallet();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  return {\r\n    clearAllTransactions: useCallback(() => dispatch(clearAllTransactions({ chainId })), [dispatch, chainId]),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode;\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n  startAdornment?: React.ReactNode;\r\n  value: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  );\r\n};\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[200]};\r\n  border-radius: ${(props) => props.theme.borderRadius}px;\r\n  display: flex;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.color.grey[600]};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`;\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport Input, { InputProps } from '../Input';\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string;\r\n  symbol: string;\r\n  onSelectMax?: () => void;\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value }) => {\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} Available\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            {/* <StyledTokenSymbol>{symbol}</StyledTokenSymbol> */}\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"small\" color=\"primary\" variant=\"contained\" onClick={onSelectMax}>\r\n                Max\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n    </StyledTokenInput>\r\n  );\r\n};\r\n\r\n/*\r\n            <div>\r\n              <Button size=\"sm\" text=\"Max\" />\r\n            </div>\r\n*/\r\n\r\nconst StyledTokenInput = styled.div``;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport default TokenInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length;\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <StyledSpacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  );\r\n};\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[100]}00;\r\n  display: flex;\r\n  height: 96px;\r\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\r\n    ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ModalActions;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport { BigNumber } from 'ethers';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useAllowance = (token: ERC20, spender: string, pendingApproval?: boolean) => {\r\n  const [allowance, setAllowance] = useState<BigNumber>(null);\r\n  const { account } = useWallet();\r\n\r\n  const fetchAllowance = useCallback(async () => {\r\n    const allowance = await token.allowance(account, spender);\r\n    setAllowance(allowance);\r\n  }, [account, spender, token]);\r\n\r\n  useEffect(() => {\r\n    if (account && spender && token) {\r\n      fetchAllowance().catch((err) => console.log(`Failed to fetch allowance: ${err.stack}`));\r\n    }\r\n  }, [account, spender, token, pendingApproval, fetchAllowance]);\r\n\r\n  return allowance;\r\n};\r\n\r\nexport default useAllowance;\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport AccountButton from '../Nav/AccountButton';\r\n\r\nconst UnlockWallet = () => {\r\n  return (\r\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n      <AccountButton />\r\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnlockWallet;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    setStat(await tombFinance.getDanteStat());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchCashPrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\r\n  const pendingApproval = useHasPendingApproval(token.address, spender);\r\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(spender, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: spender,\r\n      },\r\n    });\r\n  }, [approvalState, token, spender, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApprove;\r\n","import React, { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext);\r\n\r\n  let s: number;\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6];\r\n      break;\r\n    case 'sm':\r\n      s = spacing[2];\r\n      break;\r\n    case 'md':\r\n    default:\r\n      s = spacing[4];\r\n  }\r\n\r\n  return <StyledSpacer size={s} />;\r\n};\r\n\r\ninterface StyledSpacerProps {\r\n  size: number;\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`;\r\n\r\nexport default Spacer;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\r\n  background-color: ${(props) => (!props.disabled ? '#571eb1' : props.theme.color.grey[900])};\r\n  border: 0;\r\n  border-radius: 28px;\r\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n  &:hover {\r\n    // background-color: ${(props) => props.theme.color.grey[800]};\r\n    background-color: #2c2560;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n","module.exports = __webpack_public_path__ + \"static/media/eden.f27e2f89.png\";","import { useEffect, useState } from 'react';\r\nimport useTombFinance from '../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useClaimRewardTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getUserClaimRewardTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useClaimRewardTimerMasonry;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport config from '../../config';\r\n\r\nconst useClaimRewardCheck = () => {\r\n  const [canClaimReward, setCanClaimReward] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const canUserClaimReward = useCallback(async () => {\r\n    setCanClaimReward(await tombFinance.canUserClaimRewardFromMasonry());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      canUserClaimReward().catch((err) => console.error(err.stack));\r\n\r\n      const checkButton = setInterval(canUserClaimReward, config.refreshInterval);\r\n      return () => clearInterval(checkButton);\r\n    }\r\n  }, [isUnlocked, canUserClaimReward, tombFinance]);\r\n\r\n  return canClaimReward;\r\n};\r\n\r\nexport default useClaimRewardCheck;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\r\n\r\ninterface ProgressCountdownProps {\r\n  base: Date;\r\n  deadline: Date;\r\n  hideBar?: boolean;\r\n  description: string;\r\n}\r\n\r\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({ base, deadline, hideBar, description }) => {\r\n  const percentage =\r\n    Date.now() >= deadline.getTime()\r\n      ? 100\r\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\r\n\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const { days, hours, minutes, seconds } = countdownProps;\r\n    const h = String(days * 24 + hours);\r\n    const m = String(minutes);\r\n    const s = String(seconds);\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    );\r\n  };\r\n  return (\r\n    // <Card>\r\n    <StyledCardContentInner>\r\n      {/* <StyledDesc>{description}</StyledDesc> */}\r\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\r\n      {hideBar ? (\r\n        ''\r\n      ) : (\r\n        <StyledProgressOuter>\r\n          <StyledProgress progress={percentage} />\r\n        </StyledProgressOuter>\r\n      )}\r\n    </StyledCardContentInner>\r\n    // </Card>\r\n  );\r\n};\r\n\r\nconst StyledCountdown = styled.p`\r\n  // font-size: 14px;\r\n  font-weight: 700;\r\n  // color: ${(props) => props.theme.color.grey[100]};\r\n  margin: 0 0 6px 0;\r\n`;\r\n\r\nconst StyledProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 8px;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[700]};\r\n`;\r\n\r\nconst StyledProgress = styled.div<{ progress: number }>`\r\n  width: ${(props) => props.progress}%;\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[100]};\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ProgressCountdown;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useHarvestFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.harvestCashFromMasonry(), 'Claim TOMB from Masonry');\r\n  }, [tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvestFromMasonry;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\n\r\nconst useEarningsOnMasonry = () => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setBalance(await tombFinance.getEarningsOnMasonry());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, setBalance, fetchBalance, tombFinance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarningsOnMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport useClaimRewardTimerMasonry from '../../../hooks/masonry/useClaimRewardTimerMasonry';\r\nimport useClaimRewardCheck from '../../../hooks/masonry/useClaimRewardCheck';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useHarvestFromMasonry from '../../../hooks/useHarvestFromMasonry';\r\nimport useEarningsOnMasonry from '../../../hooks/useEarningsOnMasonry';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nconst Harvest: React.FC = () => {\r\n  const tombStats = useTombStats();\r\n  const { onReward } = useHarvestFromMasonry();\r\n  const earnings = useEarningsOnMasonry();\r\n  const canClaimReward = useClaimRewardCheck();\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n    [tombStats],\r\n  );\r\n\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n  const { from, to } = useClaimRewardTimerMasonry();\r\n\r\n  return (\r\n    <Box>\r\n      <Card style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <TokenSymbol symbol=\"DANTE\" />\r\n              <span style={{ fontSize: '28px', marginTop: '10px' }}>{getDisplayBalance(earnings)}</span>\r\n              <span style={{ fontSize: '16px' }}>{`≈ $${earnedInDollars}`}</span>\r\n              <span style={{ fontSize: '16px' }}>DANTE Earned</span>\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              <Button\r\n                onClick={onReward}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                disabled={earnings.eq(0) || !canClaimReward}\r\n              >\r\n                Claim Reward\r\n              </Button>\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canClaimReward ? (\r\n          ''\r\n        ) : (\r\n          <Card style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport config from '../../config';\r\n\r\nconst useWithdrawCheck = () => {\r\n  const [canWithdraw, setCanWithdraw] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const canUserWithdraw = useCallback(async () => {\r\n    setCanWithdraw(await tombFinance.canUserUnstakeFromMasonry());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      canUserWithdraw().catch((err) => console.error(err.stack));\r\n\r\n      const checkButton = setInterval(canUserWithdraw, config.refreshInterval);\r\n      return () => clearInterval(checkButton);\r\n    }\r\n  }, [isUnlocked, canUserWithdraw, tombFinance]);\r\n\r\n  return canWithdraw;\r\n};\r\n\r\nexport default useWithdrawCheck;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\r\n  }, [max, tokenName]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max);\r\n  }, [max]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\n\r\nconst useStakedBalanceOnMasonry = () => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setBalance(await tombFinance.getStakedSharesOnMasonry());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [setBalance, isUnlocked, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useUnstakeTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getUserUnstakeTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useUnstakeTimerMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useStakeToMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(tombFinance.stakeShareToMasonry(amount), `Stake ${amount} TSHARE to the masonry`);\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStakeToMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useWithdrawFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.withdrawShareFromMasonry(amount),\r\n        `Withdraw ${amount} TSHARE from the masonry`,\r\n      );\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdrawFromMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdrawCheck from '../../../hooks/masonry/useWithdrawCheck';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useStakedBalanceOnMasonry from '../../../hooks/useStakedBalanceOnMasonry';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useUnstakeTimerMasonry from '../../../hooks/masonry/useUnstakeTimerMasonry';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport useStakeToMasonry from '../../../hooks/useStakeToMasonry';\r\nimport useWithdrawFromMasonry from '../../../hooks/useWithdrawFromMasonry';\r\n\r\nconst Stake: React.FC = () => {\r\n  const tombFinance = useTombFinance();\r\n  const [approveStatus, approve] = useApprove(tombFinance.TSHARE, tombFinance.contracts.Masonry.address);\r\n\r\n  const tokenBalance = useTokenBalance(tombFinance.TSHARE);\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const { from, to } = useUnstakeTimerMasonry();\r\n\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('GRAIL', tombFinance.TSHARE);\r\n  const tokenPriceInDollars = useMemo(\r\n    () =>\r\n      stakedTokenPriceInDollars\r\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\r\n        : null,\r\n    [stakedTokenPriceInDollars, stakedBalance],\r\n  );\r\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\r\n\r\n  const { onStake } = useStakeToMasonry();\r\n  const { onWithdraw } = useWithdrawFromMasonry();\r\n  const canWithdrawFromMasonry = useWithdrawCheck();\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={(value) => {\r\n        onStake(value);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={'GRAIL'}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      onConfirm={(value) => {\r\n        onWithdraw(value);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={'GRAIL'}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Card style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n              <TokenSymbol symbol=\"GRAIL\" />\r\n              <span style={{ fontSize: '28px', marginTop: '10px' }}>{getDisplayBalance(stakedBalance)}</span>\r\n              <span style={{ fontSize: '16px' }}>{`≈ $${tokenPriceInDollars}`}</span>\r\n              <span style={{ fontSize: '16px' }}>GRAIL Staked</span>\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              {approveStatus !== ApprovalState.APPROVED ? (\r\n                <Button\r\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: '20px' }}\r\n                  onClick={approve}\r\n                >\r\n                  Approve GRAIL\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <IconButton disabled={!canWithdrawFromMasonry} onClick={onPresentWithdraw}>\r\n                    <RemoveIcon />\r\n                  </IconButton>\r\n                  <StyledActionSpacer />\r\n                  <IconButton onClick={onPresentDeposit}>\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </>\r\n              )}\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canWithdrawFromMasonry ? (\r\n          ''\r\n        ) : (\r\n          <Card style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeemOnMasonry = (description?: string) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    const alertDesc = description || 'Redeem TSHARE from Masonry';\r\n    handleTransactionReceipt(tombFinance.exitFromMasonry(), alertDesc);\r\n  }, [tombFinance, description, handleTransactionReceipt]);\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeemOnMasonry;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport { BigNumber } from 'ethers';\r\n\r\nconst useCurrentEpoch = () => {\r\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCurrentEpoch = useCallback(async () => {\r\n    setCurrentEpoch(await tombFinance.getCurrentEpoch());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchCurrentEpoch().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCurrentEpoch, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setCurrentEpoch, tombFinance, fetchCurrentEpoch]);\r\n\r\n  return currentEpoch;\r\n};\r\n\r\nexport default useCurrentEpoch;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\n\r\nconst useFetchMasonryAPR = () => {\r\n  const [apr, setApr] = useState<number>(0);\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchMasonryPR = useCallback(async () => {\r\n    setApr(await tombFinance.getMasonryAPR());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchMasonryPR().catch((err) => console.error(`Failed to fetch masonry apr: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchMasonryPR, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setApr, tombFinance, fetchMasonryPR]);\r\n\r\n  return apr;\r\n};\r\n\r\nexport default useFetchMasonryAPR;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useCashPriceInEstimatedTWAP = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    setStat(await tombFinance.getTombStatInEstimatedTWAP());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch TOMB price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchCashPrice, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setStat, tombFinance, fetchCashPrice]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useCashPriceInEstimatedTWAP;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { AllocationTime } from '../tomb-finance/types';\r\n\r\nconst useTreasuryAllocationTimes = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getTreasuryNextAllocationTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useTreasuryAllocationTimes;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\n\r\nconst useTotalStakedOnMasonry = () => {\r\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchTotalStaked = useCallback(async () => {\r\n    setTotalStaked(await tombFinance.getTotalStakedInMasonry());\r\n  }, [tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchTotalStaked().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchTotalStaked, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, fetchTotalStaked, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalStakedOnMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport moment from 'moment';\r\nimport styled from 'styled-components';\r\nimport Spacer from '../../components/Spacer';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Box, Card, CardContent, Button, Typography, Grid } from '@material-ui/core';\r\n\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useRedeemOnMasonry from '../../hooks/useRedeemOnMasonry';\r\nimport useStakedBalanceOnMasonry from '../../hooks/useStakedBalanceOnMasonry';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\r\nimport useFetchMasonryAPR from '../../hooks/useFetchMasonryAPR';\r\n\r\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\r\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\r\nimport useTotalStakedOnMasonry from '../../hooks/useTotalStakedOnMasonry';\r\nimport useClaimRewardCheck from '../../hooks/masonry/useClaimRewardCheck';\r\nimport useWithdrawCheck from '../../hooks/masonry/useWithdrawCheck';\r\nimport ProgressCountdown from './components/ProgressCountdown';\r\nimport MasonryImage from '../../assets/img/eden.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body, html {\r\n    background: url(${MasonryImage}) no-repeat !important;\r\n    background-size: cover !important;\r\n  }\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Masonry = () => {\r\n  const classes = useStyles();\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeemOnMasonry();\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const currentEpoch = useCurrentEpoch();\r\n  const cashStat = useCashPriceInEstimatedTWAP();\r\n  const totalStaked = useTotalStakedOnMasonry();\r\n  const masonryAPR = useFetchMasonryAPR();\r\n  const canClaimReward = useClaimRewardCheck();\r\n  const canWithdraw = useWithdrawCheck();\r\n  const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\r\n  const { to } = useTreasuryAllocationTimes();\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n      {!!account ? (\r\n        <>\r\n          <h2 style={{display:'table', padding:'10px', backgroundColor: 'rgba(104, 76, 172, 0.9)', color:'#FFF', margin: '0px auto 0px auto' }}>Eden</h2>\r\n          <Box mt={5}>\r\n            <Grid container justify=\"center\" spacing={3}>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem} style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n                  <CardContent>\r\n                    <Typography style={{ textAlign: 'center' }}>Next Epoch</Typography>\r\n                    <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Epoch\" />\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem} style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>Current Epoch</Typography>\r\n                    <Typography>{Number(currentEpoch)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem} style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>\r\n                      DANTE Price<small>(TWAP)</small>\r\n                    </Typography>\r\n                    <Typography>{scalingFactor}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem} style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>APR</Typography>\r\n                    <Typography>{masonryAPR.toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem} style={{backgroundColor: 'rgba(104, 76, 172, 0.9)'}}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>GRAILs Staked</Typography>\r\n                    <Typography>{getDisplayBalance(totalStaked)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container justify=\"center\">\r\n              <Box mt={3} style={{ width: '600px' }}>\r\n                <Alert variant=\"filled\" severity=\"warning\">\r\n                  Staked GRAILs can only be withdrawn after 6 epochs since deposit.\r\n                </Alert>\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Box mt={4}>\r\n              <StyledBoardroom>\r\n                <StyledCardsWrapper>\r\n                  <StyledCardWrapper>\r\n                    <Harvest />\r\n                  </StyledCardWrapper>\r\n                  <Spacer />\r\n                  <StyledCardWrapper>\r\n                    <Stake />\r\n                  </StyledCardWrapper>\r\n                </StyledCardsWrapper>\r\n              </StyledBoardroom>\r\n            </Box>\r\n\r\n            {/* <Grid container justify=\"center\" spacing={3}>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Rewards</Typography>\r\n\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button color=\"primary\" variant=\"outlined\">Claim Reward</Button>\r\n                </CardActions>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Claim Countdown</Typography>\r\n                  <Typography>00:00:00</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Stakings</Typography>\r\n                  <Typography>{getDisplayBalance(stakedBalance)}</Typography>\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button>+</Button>\r\n                  <Button>-</Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          </Grid> */}\r\n          </Box>\r\n\r\n          <Box mt={5}>\r\n            <Grid container justify=\"center\" spacing={3} mt={10}>\r\n              <Button\r\n                disabled={stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)}\r\n                onClick={onRedeem}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >\r\n                Claim and Withdraw\r\n              </Button>\r\n            </Grid>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <UnlockWallet />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst StyledBoardroom = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default Masonry;\r\n"],"sourceRoot":""}